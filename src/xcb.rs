/* automatically generated by rust-bindgen */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int, ..2u],
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong, ..16u],
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
pub struct Union_Unnamed4 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed4 {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..40u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
pub struct Union_Unnamed5 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed5 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
pub struct Union_Unnamed6 {
    pub data: [u64, ..6u],
}
impl Union_Unnamed6 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed7 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..48u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
pub struct Union_Unnamed8 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed8 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed9 {
    pub data: [u64, ..7u],
}
impl Union_Unnamed9 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed10 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_char,
    pub __pad1: [::libc::c_uchar, ..7u],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
pub struct Union_Unnamed11 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed11 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..8u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed12 {
    pub data: [u64, ..4u],
}
impl Union_Unnamed12 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..32u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
pub struct Union_Unnamed13 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed13 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
pub struct Struct_iovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: size_t,
}
#[repr(C)]
pub struct Struct_sched_param {
    pub __sched_priority: ::libc::c_int,
}
#[repr(C)]
pub struct Struct___sched_param {
    pub __sched_priority: ::libc::c_int,
}
pub type __cpu_mask = ::libc::c_ulong;
#[repr(C)]
pub struct Struct_Unnamed14 {
    pub __bits: [__cpu_mask, ..16u],
}
pub type cpu_set_t = Struct_Unnamed14;
#[repr(C)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
#[repr(C)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
pub enum Struct_sigevent { }
#[repr(C)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data, ..13u],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char, ..13u],
}
pub enum Struct___locale_data { }
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type __jmp_buf = [::libc::c_long, ..8u];
pub type Enum_Unnamed15 = ::libc::c_uint;

pub const XCB_COPY_FROM_PARENT: ::libc::c_long = 0;
pub const XCB_EXPOSE: ::libc::c_uint = 12;

pub const PTHREAD_CREATE_JOINABLE: ::libc::c_uint = 0;
pub const PTHREAD_CREATE_DETACHED: ::libc::c_uint = 1;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::libc::c_uint = 3;
pub const PTHREAD_MUTEX_NORMAL: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::libc::c_uint = 0;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const PTHREAD_MUTEX_STALLED: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_STALLED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_ROBUST: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: ::libc::c_uint = 1;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const PTHREAD_PRIO_NONE: ::libc::c_uint = 0;
pub const PTHREAD_PRIO_INHERIT: ::libc::c_uint = 1;
pub const PTHREAD_PRIO_PROTECT: ::libc::c_uint = 2;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: ::libc::c_uint = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: ::libc::c_uint = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: ::libc::c_uint = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: ::libc::c_uint = 0;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const PTHREAD_INHERIT_SCHED: ::libc::c_uint = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::libc::c_uint = 1;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: ::libc::c_uint = 0;
pub const PTHREAD_SCOPE_PROCESS: ::libc::c_uint = 1;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: ::libc::c_uint = 0;
pub const PTHREAD_PROCESS_SHARED: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct__pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<extern "C" fn
                                             (arg1: *mut ::libc::c_void)>,
    pub __arg: *mut ::libc::c_void,
    pub __canceltype: ::libc::c_int,
    pub __prev: *mut Struct__pthread_cleanup_buffer,
}
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const PTHREAD_CANCEL_ENABLE: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_DISABLE: ::libc::c_uint = 1;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_Unnamed25 {
    pub __cancel_jmp_buf: [Struct_Unnamed26, ..1u],
    pub __pad: [*mut ::libc::c_void, ..4u],
}
#[repr(C)]
pub struct Struct_Unnamed26 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::libc::c_int,
}
pub type __pthread_unwind_buf_t = Struct_Unnamed25;
#[repr(C)]
pub struct Struct___pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<extern "C" fn
                                                    (arg1:
                                                         *mut ::libc::c_void)>,
    pub __cancel_arg: *mut ::libc::c_void,
    pub __do_it: ::libc::c_int,
    pub __cancel_type: ::libc::c_int,
}
pub enum Struct___jmp_buf_tag { }
pub enum Struct_xcb_connection_t { }
pub type xcb_connection_t = Struct_xcb_connection_t;
#[repr(C)]
pub struct Struct_Unnamed27 {
    pub data: *mut ::libc::c_void,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_generic_iterator_t = Struct_Unnamed27;
#[repr(C)]
pub struct Struct_Unnamed28 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
pub type xcb_generic_reply_t = Struct_Unnamed28;
#[repr(C)]
pub struct Struct_Unnamed29 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub pad: [uint32_t, ..7u],
    pub full_sequence: uint32_t,
}
pub type xcb_generic_event_t = Struct_Unnamed29;
#[repr(C)]
pub struct Struct_Unnamed30 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub pad1: uint16_t,
    pub pad: [uint32_t, ..5u],
    pub full_sequence: uint32_t,
}
pub type xcb_ge_event_t = Struct_Unnamed30;
#[repr(C)]
pub struct Struct_Unnamed31 {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub resource_id: uint32_t,
    pub minor_code: uint16_t,
    pub major_code: uint8_t,
    pub pad0: uint8_t,
    pub pad: [uint32_t, ..5u],
    pub full_sequence: uint32_t,
}
pub type xcb_generic_error_t = Struct_Unnamed31;
#[repr(C)]
pub struct Struct_Unnamed32 {
    pub sequence: ::libc::c_uint,
}
pub type xcb_void_cookie_t = Struct_Unnamed32;
#[repr(C)]
pub struct Struct_xcb_char2b_t {
    pub byte1: uint8_t,
    pub byte2: uint8_t,
}
pub type xcb_char2b_t = Struct_xcb_char2b_t;
#[repr(C)]
pub struct Struct_xcb_char2b_iterator_t {
    pub data: *mut xcb_char2b_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_char2b_iterator_t = Struct_xcb_char2b_iterator_t;
pub type xcb_window_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_window_iterator_t {
    pub data: *mut xcb_window_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_window_iterator_t = Struct_xcb_window_iterator_t;
pub type xcb_pixmap_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_pixmap_iterator_t {
    pub data: *mut xcb_pixmap_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_pixmap_iterator_t = Struct_xcb_pixmap_iterator_t;
pub type xcb_cursor_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_cursor_iterator_t {
    pub data: *mut xcb_cursor_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_cursor_iterator_t = Struct_xcb_cursor_iterator_t;
pub type xcb_font_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_font_iterator_t {
    pub data: *mut xcb_font_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_font_iterator_t = Struct_xcb_font_iterator_t;
pub type xcb_gcontext_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_gcontext_iterator_t {
    pub data: *mut xcb_gcontext_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_gcontext_iterator_t = Struct_xcb_gcontext_iterator_t;
pub type xcb_colormap_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_colormap_iterator_t {
    pub data: *mut xcb_colormap_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_colormap_iterator_t = Struct_xcb_colormap_iterator_t;
pub type xcb_atom_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_atom_iterator_t {
    pub data: *mut xcb_atom_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_atom_iterator_t = Struct_xcb_atom_iterator_t;
pub type xcb_drawable_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_drawable_iterator_t {
    pub data: *mut xcb_drawable_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_drawable_iterator_t = Struct_xcb_drawable_iterator_t;
pub type xcb_fontable_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_fontable_iterator_t {
    pub data: *mut xcb_fontable_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_fontable_iterator_t = Struct_xcb_fontable_iterator_t;
pub type xcb_visualid_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_visualid_iterator_t {
    pub data: *mut xcb_visualid_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_visualid_iterator_t = Struct_xcb_visualid_iterator_t;
pub type xcb_timestamp_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_timestamp_iterator_t {
    pub data: *mut xcb_timestamp_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_timestamp_iterator_t = Struct_xcb_timestamp_iterator_t;
pub type xcb_keysym_t = uint32_t;
#[repr(C)]
pub struct Struct_xcb_keysym_iterator_t {
    pub data: *mut xcb_keysym_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_keysym_iterator_t = Struct_xcb_keysym_iterator_t;
pub type xcb_keycode_t = uint8_t;
#[repr(C)]
pub struct Struct_xcb_keycode_iterator_t {
    pub data: *mut xcb_keycode_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_keycode_iterator_t = Struct_xcb_keycode_iterator_t;
pub type xcb_button_t = uint8_t;
#[repr(C)]
pub struct Struct_xcb_button_iterator_t {
    pub data: *mut xcb_button_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_button_iterator_t = Struct_xcb_button_iterator_t;
#[repr(C)]
pub struct Struct_xcb_point_t {
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_point_t = Struct_xcb_point_t;
#[repr(C)]
pub struct Struct_xcb_point_iterator_t {
    pub data: *mut xcb_point_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_point_iterator_t = Struct_xcb_point_iterator_t;
#[repr(C)]
pub struct Struct_xcb_rectangle_t {
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_rectangle_t = Struct_xcb_rectangle_t;
#[repr(C)]
pub struct Struct_xcb_rectangle_iterator_t {
    pub data: *mut xcb_rectangle_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_rectangle_iterator_t = Struct_xcb_rectangle_iterator_t;
#[repr(C)]
pub struct Struct_xcb_arc_t {
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub angle1: int16_t,
    pub angle2: int16_t,
}
pub type xcb_arc_t = Struct_xcb_arc_t;
#[repr(C)]
pub struct Struct_xcb_arc_iterator_t {
    pub data: *mut xcb_arc_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_arc_iterator_t = Struct_xcb_arc_iterator_t;
#[repr(C)]
pub struct Struct_xcb_format_t {
    pub depth: uint8_t,
    pub bits_per_pixel: uint8_t,
    pub scanline_pad: uint8_t,
    pub pad0: [uint8_t, ..5u],
}
pub type xcb_format_t = Struct_xcb_format_t;
#[repr(C)]
pub struct Struct_xcb_format_iterator_t {
    pub data: *mut xcb_format_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_format_iterator_t = Struct_xcb_format_iterator_t;
pub type Enum_xcb_visual_class_t = ::libc::c_uint;
pub const XCB_VISUAL_CLASS_STATIC_GRAY: ::libc::c_uint = 0;
pub const XCB_VISUAL_CLASS_GRAY_SCALE: ::libc::c_uint = 1;
pub const XCB_VISUAL_CLASS_STATIC_COLOR: ::libc::c_uint = 2;
pub const XCB_VISUAL_CLASS_PSEUDO_COLOR: ::libc::c_uint = 3;
pub const XCB_VISUAL_CLASS_TRUE_COLOR: ::libc::c_uint = 4;
pub const XCB_VISUAL_CLASS_DIRECT_COLOR: ::libc::c_uint = 5;
pub type xcb_visual_class_t = Enum_xcb_visual_class_t;
#[repr(C)]
pub struct Struct_xcb_visualtype_t {
    pub visual_id: xcb_visualid_t,
    pub _class: uint8_t,
    pub bits_per_rgb_value: uint8_t,
    pub colormap_entries: uint16_t,
    pub red_mask: uint32_t,
    pub green_mask: uint32_t,
    pub blue_mask: uint32_t,
    pub pad0: [uint8_t, ..4u],
}
pub type xcb_visualtype_t = Struct_xcb_visualtype_t;
#[repr(C)]
pub struct Struct_xcb_visualtype_iterator_t {
    pub data: *mut xcb_visualtype_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_visualtype_iterator_t = Struct_xcb_visualtype_iterator_t;
#[repr(C)]
pub struct Struct_xcb_depth_t {
    pub depth: uint8_t,
    pub pad0: uint8_t,
    pub visuals_len: uint16_t,
    pub pad1: [uint8_t, ..4u],
}
pub type xcb_depth_t = Struct_xcb_depth_t;
#[repr(C)]
pub struct Struct_xcb_depth_iterator_t {
    pub data: *mut xcb_depth_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_depth_iterator_t = Struct_xcb_depth_iterator_t;
pub type Enum_xcb_event_mask_t = ::libc::c_uint;
pub const XCB_EVENT_MASK_NO_EVENT: ::libc::c_uint = 0;
pub const XCB_EVENT_MASK_KEY_PRESS: ::libc::c_uint = 1;
pub const XCB_EVENT_MASK_KEY_RELEASE: ::libc::c_uint = 2;
pub const XCB_EVENT_MASK_BUTTON_PRESS: ::libc::c_uint = 4;
pub const XCB_EVENT_MASK_BUTTON_RELEASE: ::libc::c_uint = 8;
pub const XCB_EVENT_MASK_ENTER_WINDOW: ::libc::c_uint = 16;
pub const XCB_EVENT_MASK_LEAVE_WINDOW: ::libc::c_uint = 32;
pub const XCB_EVENT_MASK_POINTER_MOTION: ::libc::c_uint = 64;
pub const XCB_EVENT_MASK_POINTER_MOTION_HINT: ::libc::c_uint = 128;
pub const XCB_EVENT_MASK_BUTTON_1_MOTION: ::libc::c_uint = 256;
pub const XCB_EVENT_MASK_BUTTON_2_MOTION: ::libc::c_uint = 512;
pub const XCB_EVENT_MASK_BUTTON_3_MOTION: ::libc::c_uint = 1024;
pub const XCB_EVENT_MASK_BUTTON_4_MOTION: ::libc::c_uint = 2048;
pub const XCB_EVENT_MASK_BUTTON_5_MOTION: ::libc::c_uint = 4096;
pub const XCB_EVENT_MASK_BUTTON_MOTION: ::libc::c_uint = 8192;
pub const XCB_EVENT_MASK_KEYMAP_STATE: ::libc::c_uint = 16384;
pub const XCB_EVENT_MASK_EXPOSURE: ::libc::c_uint = 32768;
pub const XCB_EVENT_MASK_VISIBILITY_CHANGE: ::libc::c_uint = 65536;
pub const XCB_EVENT_MASK_STRUCTURE_NOTIFY: ::libc::c_uint = 131072;
pub const XCB_EVENT_MASK_RESIZE_REDIRECT: ::libc::c_uint = 262144;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY: ::libc::c_uint = 524288;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT: ::libc::c_uint = 1048576;
pub const XCB_EVENT_MASK_FOCUS_CHANGE: ::libc::c_uint = 2097152;
pub const XCB_EVENT_MASK_PROPERTY_CHANGE: ::libc::c_uint = 4194304;
pub const XCB_EVENT_MASK_COLOR_MAP_CHANGE: ::libc::c_uint = 8388608;
pub const XCB_EVENT_MASK_OWNER_GRAB_BUTTON: ::libc::c_uint = 16777216;
pub type xcb_event_mask_t = Enum_xcb_event_mask_t;
pub type Enum_xcb_backing_store_t = ::libc::c_uint;
pub const XCB_BACKING_STORE_NOT_USEFUL: ::libc::c_uint = 0;
pub const XCB_BACKING_STORE_WHEN_MAPPED: ::libc::c_uint = 1;
pub const XCB_BACKING_STORE_ALWAYS: ::libc::c_uint = 2;
pub type xcb_backing_store_t = Enum_xcb_backing_store_t;
#[repr(C)]
pub struct Struct_xcb_screen_t {
    pub root: xcb_window_t,
    pub default_colormap: xcb_colormap_t,
    pub white_pixel: uint32_t,
    pub black_pixel: uint32_t,
    pub current_input_masks: uint32_t,
    pub width_in_pixels: uint16_t,
    pub height_in_pixels: uint16_t,
    pub width_in_millimeters: uint16_t,
    pub height_in_millimeters: uint16_t,
    pub min_installed_maps: uint16_t,
    pub max_installed_maps: uint16_t,
    pub root_visual: xcb_visualid_t,
    pub backing_stores: uint8_t,
    pub save_unders: uint8_t,
    pub root_depth: uint8_t,
    pub allowed_depths_len: uint8_t,
}
pub type xcb_screen_t = Struct_xcb_screen_t;
#[repr(C)]
pub struct Struct_xcb_screen_iterator_t {
    pub data: *mut xcb_screen_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_screen_iterator_t = Struct_xcb_screen_iterator_t;
#[repr(C)]
pub struct Struct_xcb_setup_request_t {
    pub byte_order: uint8_t,
    pub pad0: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub authorization_protocol_name_len: uint16_t,
    pub authorization_protocol_data_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_setup_request_t = Struct_xcb_setup_request_t;
#[repr(C)]
pub struct Struct_xcb_setup_request_iterator_t {
    pub data: *mut xcb_setup_request_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_setup_request_iterator_t = Struct_xcb_setup_request_iterator_t;
#[repr(C)]
pub struct Struct_xcb_setup_failed_t {
    pub status: uint8_t,
    pub reason_len: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub length: uint16_t,
}
pub type xcb_setup_failed_t = Struct_xcb_setup_failed_t;
#[repr(C)]
pub struct Struct_xcb_setup_failed_iterator_t {
    pub data: *mut xcb_setup_failed_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_setup_failed_iterator_t = Struct_xcb_setup_failed_iterator_t;
#[repr(C)]
pub struct Struct_xcb_setup_authenticate_t {
    pub status: uint8_t,
    pub pad0: [uint8_t, ..5u],
    pub length: uint16_t,
}
pub type xcb_setup_authenticate_t = Struct_xcb_setup_authenticate_t;
#[repr(C)]
pub struct Struct_xcb_setup_authenticate_iterator_t {
    pub data: *mut xcb_setup_authenticate_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_setup_authenticate_iterator_t =
    Struct_xcb_setup_authenticate_iterator_t;
pub type Enum_xcb_image_order_t = ::libc::c_uint;
pub const XCB_IMAGE_ORDER_LSB_FIRST: ::libc::c_uint = 0;
pub const XCB_IMAGE_ORDER_MSB_FIRST: ::libc::c_uint = 1;
pub type xcb_image_order_t = Enum_xcb_image_order_t;
#[repr(C)]
pub struct Struct_xcb_setup_t {
    pub status: uint8_t,
    pub pad0: uint8_t,
    pub protocol_major_version: uint16_t,
    pub protocol_minor_version: uint16_t,
    pub length: uint16_t,
    pub release_number: uint32_t,
    pub resource_id_base: uint32_t,
    pub resource_id_mask: uint32_t,
    pub motion_buffer_size: uint32_t,
    pub vendor_len: uint16_t,
    pub maximum_request_length: uint16_t,
    pub roots_len: uint8_t,
    pub pixmap_formats_len: uint8_t,
    pub image_byte_order: uint8_t,
    pub bitmap_format_bit_order: uint8_t,
    pub bitmap_format_scanline_unit: uint8_t,
    pub bitmap_format_scanline_pad: uint8_t,
    pub min_keycode: xcb_keycode_t,
    pub max_keycode: xcb_keycode_t,
    pub pad1: [uint8_t, ..4u],
}
pub type xcb_setup_t = Struct_xcb_setup_t;
#[repr(C)]
pub struct Struct_xcb_setup_iterator_t {
    pub data: *mut xcb_setup_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_setup_iterator_t = Struct_xcb_setup_iterator_t;
pub type Enum_xcb_mod_mask_t = ::libc::c_uint;
pub const XCB_MOD_MASK_SHIFT: ::libc::c_uint = 1;
pub const XCB_MOD_MASK_LOCK: ::libc::c_uint = 2;
pub const XCB_MOD_MASK_CONTROL: ::libc::c_uint = 4;
pub const XCB_MOD_MASK_1: ::libc::c_uint = 8;
pub const XCB_MOD_MASK_2: ::libc::c_uint = 16;
pub const XCB_MOD_MASK_3: ::libc::c_uint = 32;
pub const XCB_MOD_MASK_4: ::libc::c_uint = 64;
pub const XCB_MOD_MASK_5: ::libc::c_uint = 128;
pub const XCB_MOD_MASK_ANY: ::libc::c_uint = 32768;
pub type xcb_mod_mask_t = Enum_xcb_mod_mask_t;
pub type Enum_xcb_key_but_mask_t = ::libc::c_uint;
pub const XCB_KEY_BUT_MASK_SHIFT: ::libc::c_uint = 1;
pub const XCB_KEY_BUT_MASK_LOCK: ::libc::c_uint = 2;
pub const XCB_KEY_BUT_MASK_CONTROL: ::libc::c_uint = 4;
pub const XCB_KEY_BUT_MASK_MOD_1: ::libc::c_uint = 8;
pub const XCB_KEY_BUT_MASK_MOD_2: ::libc::c_uint = 16;
pub const XCB_KEY_BUT_MASK_MOD_3: ::libc::c_uint = 32;
pub const XCB_KEY_BUT_MASK_MOD_4: ::libc::c_uint = 64;
pub const XCB_KEY_BUT_MASK_MOD_5: ::libc::c_uint = 128;
pub const XCB_KEY_BUT_MASK_BUTTON_1: ::libc::c_uint = 256;
pub const XCB_KEY_BUT_MASK_BUTTON_2: ::libc::c_uint = 512;
pub const XCB_KEY_BUT_MASK_BUTTON_3: ::libc::c_uint = 1024;
pub const XCB_KEY_BUT_MASK_BUTTON_4: ::libc::c_uint = 2048;
pub const XCB_KEY_BUT_MASK_BUTTON_5: ::libc::c_uint = 4096;
pub type xcb_key_but_mask_t = Enum_xcb_key_but_mask_t;
pub type Enum_xcb_window_enum_t = ::libc::c_uint;
pub const XCB_WINDOW_NONE: ::libc::c_uint = 0;
pub type xcb_window_enum_t = Enum_xcb_window_enum_t;
#[repr(C)]
pub struct Struct_xcb_key_press_event_t {
    pub response_type: uint8_t,
    pub detail: xcb_keycode_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_key_press_event_t = Struct_xcb_key_press_event_t;
pub type xcb_key_release_event_t = xcb_key_press_event_t;
pub type Enum_xcb_button_mask_t = ::libc::c_uint;
pub const XCB_BUTTON_MASK_1: ::libc::c_uint = 256;
pub const XCB_BUTTON_MASK_2: ::libc::c_uint = 512;
pub const XCB_BUTTON_MASK_3: ::libc::c_uint = 1024;
pub const XCB_BUTTON_MASK_4: ::libc::c_uint = 2048;
pub const XCB_BUTTON_MASK_5: ::libc::c_uint = 4096;
pub const XCB_BUTTON_MASK_ANY: ::libc::c_uint = 32768;
pub type xcb_button_mask_t = Enum_xcb_button_mask_t;
#[repr(C)]
pub struct Struct_xcb_button_press_event_t {
    pub response_type: uint8_t,
    pub detail: xcb_button_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_button_press_event_t = Struct_xcb_button_press_event_t;
pub type xcb_button_release_event_t = xcb_button_press_event_t;
pub type Enum_xcb_motion_t = ::libc::c_uint;
pub const XCB_MOTION_NORMAL: ::libc::c_uint = 0;
pub const XCB_MOTION_HINT: ::libc::c_uint = 1;
pub type xcb_motion_t = Enum_xcb_motion_t;
#[repr(C)]
pub struct Struct_xcb_motion_notify_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub same_screen: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_motion_notify_event_t = Struct_xcb_motion_notify_event_t;
pub type Enum_xcb_notify_detail_t = ::libc::c_uint;
pub const XCB_NOTIFY_DETAIL_ANCESTOR: ::libc::c_uint = 0;
pub const XCB_NOTIFY_DETAIL_VIRTUAL: ::libc::c_uint = 1;
pub const XCB_NOTIFY_DETAIL_INFERIOR: ::libc::c_uint = 2;
pub const XCB_NOTIFY_DETAIL_NONLINEAR: ::libc::c_uint = 3;
pub const XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL: ::libc::c_uint = 4;
pub const XCB_NOTIFY_DETAIL_POINTER: ::libc::c_uint = 5;
pub const XCB_NOTIFY_DETAIL_POINTER_ROOT: ::libc::c_uint = 6;
pub const XCB_NOTIFY_DETAIL_NONE: ::libc::c_uint = 7;
pub type xcb_notify_detail_t = Enum_xcb_notify_detail_t;
pub type Enum_xcb_notify_mode_t = ::libc::c_uint;
pub const XCB_NOTIFY_MODE_NORMAL: ::libc::c_uint = 0;
pub const XCB_NOTIFY_MODE_GRAB: ::libc::c_uint = 1;
pub const XCB_NOTIFY_MODE_UNGRAB: ::libc::c_uint = 2;
pub const XCB_NOTIFY_MODE_WHILE_GRABBED: ::libc::c_uint = 3;
pub type xcb_notify_mode_t = Enum_xcb_notify_mode_t;
#[repr(C)]
pub struct Struct_xcb_enter_notify_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub event_x: int16_t,
    pub event_y: int16_t,
    pub state: uint16_t,
    pub mode: uint8_t,
    pub same_screen_focus: uint8_t,
}
pub type xcb_enter_notify_event_t = Struct_xcb_enter_notify_event_t;
pub type xcb_leave_notify_event_t = xcb_enter_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_focus_in_event_t {
    pub response_type: uint8_t,
    pub detail: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub mode: uint8_t,
    pub pad0: [uint8_t, ..3u],
}
pub type xcb_focus_in_event_t = Struct_xcb_focus_in_event_t;
pub type xcb_focus_out_event_t = xcb_focus_in_event_t;
#[repr(C)]
pub struct Struct_xcb_keymap_notify_event_t {
    pub response_type: uint8_t,
    pub keys: [uint8_t, ..31u],
}
pub type xcb_keymap_notify_event_t = Struct_xcb_keymap_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_expose_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub x: uint16_t,
    pub y: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub count: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_expose_event_t = Struct_xcb_expose_event_t;
#[repr(C)]
pub struct Struct_xcb_graphics_exposure_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub drawable: xcb_drawable_t,
    pub x: uint16_t,
    pub y: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub minor_opcode: uint16_t,
    pub count: uint16_t,
    pub major_opcode: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_graphics_exposure_event_t = Struct_xcb_graphics_exposure_event_t;
#[repr(C)]
pub struct Struct_xcb_no_exposure_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub drawable: xcb_drawable_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad1: uint8_t,
}
pub type xcb_no_exposure_event_t = Struct_xcb_no_exposure_event_t;
pub type Enum_xcb_visibility_t = ::libc::c_uint;
pub const XCB_VISIBILITY_UNOBSCURED: ::libc::c_uint = 0;
pub const XCB_VISIBILITY_PARTIALLY_OBSCURED: ::libc::c_uint = 1;
pub const XCB_VISIBILITY_FULLY_OBSCURED: ::libc::c_uint = 2;
pub type xcb_visibility_t = Enum_xcb_visibility_t;
#[repr(C)]
pub struct Struct_xcb_visibility_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub state: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_visibility_notify_event_t = Struct_xcb_visibility_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_create_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub override_redirect: uint8_t,
    pub pad1: uint8_t,
}
pub type xcb_create_notify_event_t = Struct_xcb_create_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_destroy_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
}
pub type xcb_destroy_notify_event_t = Struct_xcb_destroy_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_unmap_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub from_configure: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_unmap_notify_event_t = Struct_xcb_unmap_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_map_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub override_redirect: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_map_notify_event_t = Struct_xcb_map_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_map_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
}
pub type xcb_map_request_event_t = Struct_xcb_map_request_event_t;
#[repr(C)]
pub struct Struct_xcb_reparent_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub override_redirect: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_reparent_notify_event_t = Struct_xcb_reparent_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_configure_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub above_sibling: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub override_redirect: uint8_t,
    pub pad1: uint8_t,
}
pub type xcb_configure_notify_event_t = Struct_xcb_configure_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_configure_request_event_t {
    pub response_type: uint8_t,
    pub stack_mode: uint8_t,
    pub sequence: uint16_t,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub sibling: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub value_mask: uint16_t,
}
pub type xcb_configure_request_event_t = Struct_xcb_configure_request_event_t;
#[repr(C)]
pub struct Struct_xcb_gravity_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_gravity_notify_event_t = Struct_xcb_gravity_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_resize_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_resize_request_event_t = Struct_xcb_resize_request_event_t;
pub type Enum_xcb_place_t = ::libc::c_uint;
pub const XCB_PLACE_ON_TOP: ::libc::c_uint = 0;
pub const XCB_PLACE_ON_BOTTOM: ::libc::c_uint = 1;
pub type xcb_place_t = Enum_xcb_place_t;
#[repr(C)]
pub struct Struct_xcb_circulate_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub pad1: [uint8_t, ..4u],
    pub place: uint8_t,
    pub pad2: [uint8_t, ..3u],
}
pub type xcb_circulate_notify_event_t = Struct_xcb_circulate_notify_event_t;
pub type xcb_circulate_request_event_t = xcb_circulate_notify_event_t;
pub type Enum_xcb_property_t = ::libc::c_uint;
pub const XCB_PROPERTY_NEW_VALUE: ::libc::c_uint = 0;
pub const XCB_PROPERTY_DELETE: ::libc::c_uint = 1;
pub type xcb_property_t = Enum_xcb_property_t;
#[repr(C)]
pub struct Struct_xcb_property_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub atom: xcb_atom_t,
    pub time: xcb_timestamp_t,
    pub state: uint8_t,
    pub pad1: [uint8_t, ..3u],
}
pub type xcb_property_notify_event_t = Struct_xcb_property_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_selection_clear_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
}
pub type xcb_selection_clear_event_t = Struct_xcb_selection_clear_event_t;
pub type Enum_xcb_time_t = ::libc::c_uint;
pub const XCB_TIME_CURRENT_TIME: ::libc::c_uint = 0;
pub type xcb_time_t = Enum_xcb_time_t;
pub type Enum_xcb_atom_enum_t = ::libc::c_uint;
pub const XCB_ATOM_NONE: ::libc::c_uint = 0;
pub const XCB_ATOM_ANY: ::libc::c_uint = 0;
pub const XCB_ATOM_PRIMARY: ::libc::c_uint = 1;
pub const XCB_ATOM_SECONDARY: ::libc::c_uint = 2;
pub const XCB_ATOM_ARC: ::libc::c_uint = 3;
pub const XCB_ATOM_ATOM: ::libc::c_uint = 4;
pub const XCB_ATOM_BITMAP: ::libc::c_uint = 5;
pub const XCB_ATOM_CARDINAL: ::libc::c_uint = 6;
pub const XCB_ATOM_COLORMAP: ::libc::c_uint = 7;
pub const XCB_ATOM_CURSOR: ::libc::c_uint = 8;
pub const XCB_ATOM_CUT_BUFFER0: ::libc::c_uint = 9;
pub const XCB_ATOM_CUT_BUFFER1: ::libc::c_uint = 10;
pub const XCB_ATOM_CUT_BUFFER2: ::libc::c_uint = 11;
pub const XCB_ATOM_CUT_BUFFER3: ::libc::c_uint = 12;
pub const XCB_ATOM_CUT_BUFFER4: ::libc::c_uint = 13;
pub const XCB_ATOM_CUT_BUFFER5: ::libc::c_uint = 14;
pub const XCB_ATOM_CUT_BUFFER6: ::libc::c_uint = 15;
pub const XCB_ATOM_CUT_BUFFER7: ::libc::c_uint = 16;
pub const XCB_ATOM_DRAWABLE: ::libc::c_uint = 17;
pub const XCB_ATOM_FONT: ::libc::c_uint = 18;
pub const XCB_ATOM_INTEGER: ::libc::c_uint = 19;
pub const XCB_ATOM_PIXMAP: ::libc::c_uint = 20;
pub const XCB_ATOM_POINT: ::libc::c_uint = 21;
pub const XCB_ATOM_RECTANGLE: ::libc::c_uint = 22;
pub const XCB_ATOM_RESOURCE_MANAGER: ::libc::c_uint = 23;
pub const XCB_ATOM_RGB_COLOR_MAP: ::libc::c_uint = 24;
pub const XCB_ATOM_RGB_BEST_MAP: ::libc::c_uint = 25;
pub const XCB_ATOM_RGB_BLUE_MAP: ::libc::c_uint = 26;
pub const XCB_ATOM_RGB_DEFAULT_MAP: ::libc::c_uint = 27;
pub const XCB_ATOM_RGB_GRAY_MAP: ::libc::c_uint = 28;
pub const XCB_ATOM_RGB_GREEN_MAP: ::libc::c_uint = 29;
pub const XCB_ATOM_RGB_RED_MAP: ::libc::c_uint = 30;
pub const XCB_ATOM_STRING: ::libc::c_uint = 31;
pub const XCB_ATOM_VISUALID: ::libc::c_uint = 32;
pub const XCB_ATOM_WINDOW: ::libc::c_uint = 33;
pub const XCB_ATOM_WM_COMMAND: ::libc::c_uint = 34;
pub const XCB_ATOM_WM_HINTS: ::libc::c_uint = 35;
pub const XCB_ATOM_WM_CLIENT_MACHINE: ::libc::c_uint = 36;
pub const XCB_ATOM_WM_ICON_NAME: ::libc::c_uint = 37;
pub const XCB_ATOM_WM_ICON_SIZE: ::libc::c_uint = 38;
pub const XCB_ATOM_WM_NAME: ::libc::c_uint = 39;
pub const XCB_ATOM_WM_NORMAL_HINTS: ::libc::c_uint = 40;
pub const XCB_ATOM_WM_SIZE_HINTS: ::libc::c_uint = 41;
pub const XCB_ATOM_WM_ZOOM_HINTS: ::libc::c_uint = 42;
pub const XCB_ATOM_MIN_SPACE: ::libc::c_uint = 43;
pub const XCB_ATOM_NORM_SPACE: ::libc::c_uint = 44;
pub const XCB_ATOM_MAX_SPACE: ::libc::c_uint = 45;
pub const XCB_ATOM_END_SPACE: ::libc::c_uint = 46;
pub const XCB_ATOM_SUPERSCRIPT_X: ::libc::c_uint = 47;
pub const XCB_ATOM_SUPERSCRIPT_Y: ::libc::c_uint = 48;
pub const XCB_ATOM_SUBSCRIPT_X: ::libc::c_uint = 49;
pub const XCB_ATOM_SUBSCRIPT_Y: ::libc::c_uint = 50;
pub const XCB_ATOM_UNDERLINE_POSITION: ::libc::c_uint = 51;
pub const XCB_ATOM_UNDERLINE_THICKNESS: ::libc::c_uint = 52;
pub const XCB_ATOM_STRIKEOUT_ASCENT: ::libc::c_uint = 53;
pub const XCB_ATOM_STRIKEOUT_DESCENT: ::libc::c_uint = 54;
pub const XCB_ATOM_ITALIC_ANGLE: ::libc::c_uint = 55;
pub const XCB_ATOM_X_HEIGHT: ::libc::c_uint = 56;
pub const XCB_ATOM_QUAD_WIDTH: ::libc::c_uint = 57;
pub const XCB_ATOM_WEIGHT: ::libc::c_uint = 58;
pub const XCB_ATOM_POINT_SIZE: ::libc::c_uint = 59;
pub const XCB_ATOM_RESOLUTION: ::libc::c_uint = 60;
pub const XCB_ATOM_COPYRIGHT: ::libc::c_uint = 61;
pub const XCB_ATOM_NOTICE: ::libc::c_uint = 62;
pub const XCB_ATOM_FONT_NAME: ::libc::c_uint = 63;
pub const XCB_ATOM_FAMILY_NAME: ::libc::c_uint = 64;
pub const XCB_ATOM_FULL_NAME: ::libc::c_uint = 65;
pub const XCB_ATOM_CAP_HEIGHT: ::libc::c_uint = 66;
pub const XCB_ATOM_WM_CLASS: ::libc::c_uint = 67;
pub const XCB_ATOM_WM_TRANSIENT_FOR: ::libc::c_uint = 68;
pub type xcb_atom_enum_t = Enum_xcb_atom_enum_t;
#[repr(C)]
pub struct Struct_xcb_selection_request_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
pub type xcb_selection_request_event_t = Struct_xcb_selection_request_event_t;
#[repr(C)]
pub struct Struct_xcb_selection_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub time: xcb_timestamp_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
pub type xcb_selection_notify_event_t = Struct_xcb_selection_notify_event_t;
pub type Enum_xcb_colormap_state_t = ::libc::c_uint;
pub const XCB_COLORMAP_STATE_UNINSTALLED: ::libc::c_uint = 0;
pub const XCB_COLORMAP_STATE_INSTALLED: ::libc::c_uint = 1;
pub type xcb_colormap_state_t = Enum_xcb_colormap_state_t;
pub type Enum_xcb_colormap_enum_t = ::libc::c_uint;
pub const XCB_COLORMAP_NONE: ::libc::c_uint = 0;
pub type xcb_colormap_enum_t = Enum_xcb_colormap_enum_t;
#[repr(C)]
pub struct Struct_xcb_colormap_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub colormap: xcb_colormap_t,
    pub _new: uint8_t,
    pub state: uint8_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_colormap_notify_event_t = Struct_xcb_colormap_notify_event_t;
#[repr(C)]
pub struct Union_xcb_client_message_data_t {
    pub data: [u32, ..5u],
}
impl Union_xcb_client_message_data_t {
    pub fn data8(&mut self) -> *mut [uint8_t, ..20u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn data16(&mut self) -> *mut [uint16_t, ..10u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn data32(&mut self) -> *mut [uint32_t, ..5u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type xcb_client_message_data_t = Union_xcb_client_message_data_t;
#[repr(C)]
pub struct Struct_xcb_client_message_data_iterator_t {
    pub data: *mut xcb_client_message_data_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_client_message_data_iterator_t =
    Struct_xcb_client_message_data_iterator_t;
#[repr(C)]
pub struct Struct_xcb_client_message_event_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub window: xcb_window_t,
    pub _type: xcb_atom_t,
    pub data: xcb_client_message_data_t,
}
pub type xcb_client_message_event_t = Struct_xcb_client_message_event_t;
pub type Enum_xcb_mapping_t = ::libc::c_uint;
pub const XCB_MAPPING_MODIFIER: ::libc::c_uint = 0;
pub const XCB_MAPPING_KEYBOARD: ::libc::c_uint = 1;
pub const XCB_MAPPING_POINTER: ::libc::c_uint = 2;
pub type xcb_mapping_t = Enum_xcb_mapping_t;
#[repr(C)]
pub struct Struct_xcb_mapping_notify_event_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub request: uint8_t,
    pub first_keycode: xcb_keycode_t,
    pub count: uint8_t,
    pub pad1: uint8_t,
}
pub type xcb_mapping_notify_event_t = Struct_xcb_mapping_notify_event_t;
#[repr(C)]
pub struct Struct_xcb_ge_generic_event_t {
    pub response_type: uint8_t,
    pub extension: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub pad0: [uint8_t, ..22u],
    pub full_sequence: uint32_t,
}
pub type xcb_ge_generic_event_t = Struct_xcb_ge_generic_event_t;
#[repr(C)]
pub struct Struct_xcb_request_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub bad_value: uint32_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_request_error_t = Struct_xcb_request_error_t;
#[repr(C)]
pub struct Struct_xcb_value_error_t {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub bad_value: uint32_t,
    pub minor_opcode: uint16_t,
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_value_error_t = Struct_xcb_value_error_t;
pub type xcb_window_error_t = xcb_value_error_t;
pub type xcb_pixmap_error_t = xcb_value_error_t;
pub type xcb_atom_error_t = xcb_value_error_t;
pub type xcb_cursor_error_t = xcb_value_error_t;
pub type xcb_font_error_t = xcb_value_error_t;
pub type xcb_match_error_t = xcb_request_error_t;
pub type xcb_drawable_error_t = xcb_value_error_t;
pub type xcb_access_error_t = xcb_request_error_t;
pub type xcb_alloc_error_t = xcb_request_error_t;
pub type xcb_colormap_error_t = xcb_value_error_t;
pub type xcb_g_context_error_t = xcb_value_error_t;
pub type xcb_id_choice_error_t = xcb_value_error_t;
pub type xcb_name_error_t = xcb_request_error_t;
pub type xcb_length_error_t = xcb_request_error_t;
pub type xcb_implementation_error_t = xcb_request_error_t;
pub type Enum_xcb_window_class_t = ::libc::c_uint;
pub const XCB_WINDOW_CLASS_COPY_FROM_PARENT: ::libc::c_uint = 0;
pub const XCB_WINDOW_CLASS_INPUT_OUTPUT: ::libc::c_uint = 1;
pub const XCB_WINDOW_CLASS_INPUT_ONLY: ::libc::c_uint = 2;
pub type xcb_window_class_t = Enum_xcb_window_class_t;
pub type Enum_xcb_cw_t = ::libc::c_uint;
pub const XCB_CW_BACK_PIXMAP: ::libc::c_uint = 1;
pub const XCB_CW_BACK_PIXEL: ::libc::c_uint = 2;
pub const XCB_CW_BORDER_PIXMAP: ::libc::c_uint = 4;
pub const XCB_CW_BORDER_PIXEL: ::libc::c_uint = 8;
pub const XCB_CW_BIT_GRAVITY: ::libc::c_uint = 16;
pub const XCB_CW_WIN_GRAVITY: ::libc::c_uint = 32;
pub const XCB_CW_BACKING_STORE: ::libc::c_uint = 64;
pub const XCB_CW_BACKING_PLANES: ::libc::c_uint = 128;
pub const XCB_CW_BACKING_PIXEL: ::libc::c_uint = 256;
pub const XCB_CW_OVERRIDE_REDIRECT: ::libc::c_uint = 512;
pub const XCB_CW_SAVE_UNDER: ::libc::c_uint = 1024;
pub const XCB_CW_EVENT_MASK: ::libc::c_uint = 2048;
pub const XCB_CW_DONT_PROPAGATE: ::libc::c_uint = 4096;
pub const XCB_CW_COLORMAP: ::libc::c_uint = 8192;
pub const XCB_CW_CURSOR: ::libc::c_uint = 16384;
pub type xcb_cw_t = Enum_xcb_cw_t;
pub type Enum_xcb_back_pixmap_t = ::libc::c_uint;
pub const XCB_BACK_PIXMAP_NONE: ::libc::c_uint = 0;
pub const XCB_BACK_PIXMAP_PARENT_RELATIVE: ::libc::c_uint = 1;
pub type xcb_back_pixmap_t = Enum_xcb_back_pixmap_t;
pub type Enum_xcb_gravity_t = ::libc::c_uint;
pub const XCB_GRAVITY_BIT_FORGET: ::libc::c_uint = 0;
pub const XCB_GRAVITY_WIN_UNMAP: ::libc::c_uint = 0;
pub const XCB_GRAVITY_NORTH_WEST: ::libc::c_uint = 1;
pub const XCB_GRAVITY_NORTH: ::libc::c_uint = 2;
pub const XCB_GRAVITY_NORTH_EAST: ::libc::c_uint = 3;
pub const XCB_GRAVITY_WEST: ::libc::c_uint = 4;
pub const XCB_GRAVITY_CENTER: ::libc::c_uint = 5;
pub const XCB_GRAVITY_EAST: ::libc::c_uint = 6;
pub const XCB_GRAVITY_SOUTH_WEST: ::libc::c_uint = 7;
pub const XCB_GRAVITY_SOUTH: ::libc::c_uint = 8;
pub const XCB_GRAVITY_SOUTH_EAST: ::libc::c_uint = 9;
pub const XCB_GRAVITY_STATIC: ::libc::c_uint = 10;
pub type xcb_gravity_t = Enum_xcb_gravity_t;
#[repr(C)]
pub struct Struct_xcb_create_window_request_t {
    pub major_opcode: uint8_t,
    pub depth: uint8_t,
    pub length: uint16_t,
    pub wid: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub _class: uint16_t,
    pub visual: xcb_visualid_t,
    pub value_mask: uint32_t,
}
pub type xcb_create_window_request_t = Struct_xcb_create_window_request_t;
#[repr(C)]
pub struct Struct_xcb_change_window_attributes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub value_mask: uint32_t,
}
pub type xcb_change_window_attributes_request_t =
    Struct_xcb_change_window_attributes_request_t;
pub type Enum_xcb_map_state_t = ::libc::c_uint;
pub const XCB_MAP_STATE_UNMAPPED: ::libc::c_uint = 0;
pub const XCB_MAP_STATE_UNVIEWABLE: ::libc::c_uint = 1;
pub const XCB_MAP_STATE_VIEWABLE: ::libc::c_uint = 2;
pub type xcb_map_state_t = Enum_xcb_map_state_t;
#[repr(C)]
pub struct Struct_xcb_get_window_attributes_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_window_attributes_cookie_t =
    Struct_xcb_get_window_attributes_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_window_attributes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_get_window_attributes_request_t =
    Struct_xcb_get_window_attributes_request_t;
#[repr(C)]
pub struct Struct_xcb_get_window_attributes_reply_t {
    pub response_type: uint8_t,
    pub backing_store: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub visual: xcb_visualid_t,
    pub _class: uint16_t,
    pub bit_gravity: uint8_t,
    pub win_gravity: uint8_t,
    pub backing_planes: uint32_t,
    pub backing_pixel: uint32_t,
    pub save_under: uint8_t,
    pub map_is_installed: uint8_t,
    pub map_state: uint8_t,
    pub override_redirect: uint8_t,
    pub colormap: xcb_colormap_t,
    pub all_event_masks: uint32_t,
    pub your_event_mask: uint32_t,
    pub do_not_propagate_mask: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_get_window_attributes_reply_t =
    Struct_xcb_get_window_attributes_reply_t;
#[repr(C)]
pub struct Struct_xcb_destroy_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_destroy_window_request_t = Struct_xcb_destroy_window_request_t;
#[repr(C)]
pub struct Struct_xcb_destroy_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_destroy_subwindows_request_t =
    Struct_xcb_destroy_subwindows_request_t;
pub type Enum_xcb_set_mode_t = ::libc::c_uint;
pub const XCB_SET_MODE_INSERT: ::libc::c_uint = 0;
pub const XCB_SET_MODE_DELETE: ::libc::c_uint = 1;
pub type xcb_set_mode_t = Enum_xcb_set_mode_t;
#[repr(C)]
pub struct Struct_xcb_change_save_set_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_change_save_set_request_t = Struct_xcb_change_save_set_request_t;
#[repr(C)]
pub struct Struct_xcb_reparent_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_reparent_window_request_t = Struct_xcb_reparent_window_request_t;
#[repr(C)]
pub struct Struct_xcb_map_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_map_window_request_t = Struct_xcb_map_window_request_t;
#[repr(C)]
pub struct Struct_xcb_map_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_map_subwindows_request_t = Struct_xcb_map_subwindows_request_t;
#[repr(C)]
pub struct Struct_xcb_unmap_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_unmap_window_request_t = Struct_xcb_unmap_window_request_t;
#[repr(C)]
pub struct Struct_xcb_unmap_subwindows_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_unmap_subwindows_request_t =
    Struct_xcb_unmap_subwindows_request_t;
pub type Enum_xcb_config_window_t = ::libc::c_uint;
pub const XCB_CONFIG_WINDOW_X: ::libc::c_uint = 1;
pub const XCB_CONFIG_WINDOW_Y: ::libc::c_uint = 2;
pub const XCB_CONFIG_WINDOW_WIDTH: ::libc::c_uint = 4;
pub const XCB_CONFIG_WINDOW_HEIGHT: ::libc::c_uint = 8;
pub const XCB_CONFIG_WINDOW_BORDER_WIDTH: ::libc::c_uint = 16;
pub const XCB_CONFIG_WINDOW_SIBLING: ::libc::c_uint = 32;
pub const XCB_CONFIG_WINDOW_STACK_MODE: ::libc::c_uint = 64;
pub type xcb_config_window_t = Enum_xcb_config_window_t;
pub type Enum_xcb_stack_mode_t = ::libc::c_uint;
pub const XCB_STACK_MODE_ABOVE: ::libc::c_uint = 0;
pub const XCB_STACK_MODE_BELOW: ::libc::c_uint = 1;
pub const XCB_STACK_MODE_TOP_IF: ::libc::c_uint = 2;
pub const XCB_STACK_MODE_BOTTOM_IF: ::libc::c_uint = 3;
pub const XCB_STACK_MODE_OPPOSITE: ::libc::c_uint = 4;
pub type xcb_stack_mode_t = Enum_xcb_stack_mode_t;
#[repr(C)]
pub struct Struct_xcb_configure_window_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub value_mask: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_configure_window_request_t =
    Struct_xcb_configure_window_request_t;
pub type Enum_xcb_circulate_t = ::libc::c_uint;
pub const XCB_CIRCULATE_RAISE_LOWEST: ::libc::c_uint = 0;
pub const XCB_CIRCULATE_LOWER_HIGHEST: ::libc::c_uint = 1;
pub type xcb_circulate_t = Enum_xcb_circulate_t;
#[repr(C)]
pub struct Struct_xcb_circulate_window_request_t {
    pub major_opcode: uint8_t,
    pub direction: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_circulate_window_request_t =
    Struct_xcb_circulate_window_request_t;
#[repr(C)]
pub struct Struct_xcb_get_geometry_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_geometry_cookie_t = Struct_xcb_get_geometry_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_geometry_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
}
pub type xcb_get_geometry_request_t = Struct_xcb_get_geometry_request_t;
#[repr(C)]
pub struct Struct_xcb_get_geometry_reply_t {
    pub response_type: uint8_t,
    pub depth: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub border_width: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_get_geometry_reply_t = Struct_xcb_get_geometry_reply_t;
#[repr(C)]
pub struct Struct_xcb_query_tree_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_tree_cookie_t = Struct_xcb_query_tree_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_tree_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_query_tree_request_t = Struct_xcb_query_tree_request_t;
#[repr(C)]
pub struct Struct_xcb_query_tree_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub parent: xcb_window_t,
    pub children_len: uint16_t,
    pub pad1: [uint8_t, ..14u],
}
pub type xcb_query_tree_reply_t = Struct_xcb_query_tree_reply_t;
#[repr(C)]
pub struct Struct_xcb_intern_atom_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_intern_atom_cookie_t = Struct_xcb_intern_atom_cookie_t;
#[repr(C)]
pub struct Struct_xcb_intern_atom_request_t {
    pub major_opcode: uint8_t,
    pub only_if_exists: uint8_t,
    pub length: uint16_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_intern_atom_request_t = Struct_xcb_intern_atom_request_t;
#[repr(C)]
pub struct Struct_xcb_intern_atom_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub atom: xcb_atom_t,
}
pub type xcb_intern_atom_reply_t = Struct_xcb_intern_atom_reply_t;
#[repr(C)]
pub struct Struct_xcb_get_atom_name_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_atom_name_cookie_t = Struct_xcb_get_atom_name_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_atom_name_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub atom: xcb_atom_t,
}
pub type xcb_get_atom_name_request_t = Struct_xcb_get_atom_name_request_t;
#[repr(C)]
pub struct Struct_xcb_get_atom_name_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_get_atom_name_reply_t = Struct_xcb_get_atom_name_reply_t;
pub type Enum_xcb_prop_mode_t = ::libc::c_uint;
pub const XCB_PROP_MODE_REPLACE: ::libc::c_uint = 0;
pub const XCB_PROP_MODE_PREPEND: ::libc::c_uint = 1;
pub const XCB_PROP_MODE_APPEND: ::libc::c_uint = 2;
pub type xcb_prop_mode_t = Enum_xcb_prop_mode_t;
#[repr(C)]
pub struct Struct_xcb_change_property_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub format: uint8_t,
    pub pad0: [uint8_t, ..3u],
    pub data_len: uint32_t,
}
pub type xcb_change_property_request_t = Struct_xcb_change_property_request_t;
#[repr(C)]
pub struct Struct_xcb_delete_property_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
}
pub type xcb_delete_property_request_t = Struct_xcb_delete_property_request_t;
pub type Enum_xcb_get_property_type_t = ::libc::c_uint;
pub const XCB_GET_PROPERTY_TYPE_ANY: ::libc::c_uint = 0;
pub type xcb_get_property_type_t = Enum_xcb_get_property_type_t;
#[repr(C)]
pub struct Struct_xcb_get_property_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_property_cookie_t = Struct_xcb_get_property_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_property_request_t {
    pub major_opcode: uint8_t,
    pub _delete: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub _type: xcb_atom_t,
    pub long_offset: uint32_t,
    pub long_length: uint32_t,
}
pub type xcb_get_property_request_t = Struct_xcb_get_property_request_t;
#[repr(C)]
pub struct Struct_xcb_get_property_reply_t {
    pub response_type: uint8_t,
    pub format: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub _type: xcb_atom_t,
    pub bytes_after: uint32_t,
    pub value_len: uint32_t,
    pub pad0: [uint8_t, ..12u],
}
pub type xcb_get_property_reply_t = Struct_xcb_get_property_reply_t;
#[repr(C)]
pub struct Struct_xcb_list_properties_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_properties_cookie_t = Struct_xcb_list_properties_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_properties_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_list_properties_request_t = Struct_xcb_list_properties_request_t;
#[repr(C)]
pub struct Struct_xcb_list_properties_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub atoms_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_list_properties_reply_t = Struct_xcb_list_properties_reply_t;
#[repr(C)]
pub struct Struct_xcb_set_selection_owner_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_set_selection_owner_request_t =
    Struct_xcb_set_selection_owner_request_t;
#[repr(C)]
pub struct Struct_xcb_get_selection_owner_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_selection_owner_cookie_t =
    Struct_xcb_get_selection_owner_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_selection_owner_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub selection: xcb_atom_t,
}
pub type xcb_get_selection_owner_request_t =
    Struct_xcb_get_selection_owner_request_t;
#[repr(C)]
pub struct Struct_xcb_get_selection_owner_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub owner: xcb_window_t,
}
pub type xcb_get_selection_owner_reply_t =
    Struct_xcb_get_selection_owner_reply_t;
#[repr(C)]
pub struct Struct_xcb_convert_selection_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_convert_selection_request_t =
    Struct_xcb_convert_selection_request_t;
pub type Enum_xcb_send_event_dest_t = ::libc::c_uint;
pub const XCB_SEND_EVENT_DEST_POINTER_WINDOW: ::libc::c_uint = 0;
pub const XCB_SEND_EVENT_DEST_ITEM_FOCUS: ::libc::c_uint = 1;
pub type xcb_send_event_dest_t = Enum_xcb_send_event_dest_t;
#[repr(C)]
pub struct Struct_xcb_send_event_request_t {
    pub major_opcode: uint8_t,
    pub propagate: uint8_t,
    pub length: uint16_t,
    pub destination: xcb_window_t,
    pub event_mask: uint32_t,
    pub event: [::libc::c_char, ..32u],
}
pub type xcb_send_event_request_t = Struct_xcb_send_event_request_t;
pub type Enum_xcb_grab_mode_t = ::libc::c_uint;
pub const XCB_GRAB_MODE_SYNC: ::libc::c_uint = 0;
pub const XCB_GRAB_MODE_ASYNC: ::libc::c_uint = 1;
pub type xcb_grab_mode_t = Enum_xcb_grab_mode_t;
pub type Enum_xcb_grab_status_t = ::libc::c_uint;
pub const XCB_GRAB_STATUS_SUCCESS: ::libc::c_uint = 0;
pub const XCB_GRAB_STATUS_ALREADY_GRABBED: ::libc::c_uint = 1;
pub const XCB_GRAB_STATUS_INVALID_TIME: ::libc::c_uint = 2;
pub const XCB_GRAB_STATUS_NOT_VIEWABLE: ::libc::c_uint = 3;
pub const XCB_GRAB_STATUS_FROZEN: ::libc::c_uint = 4;
pub type xcb_grab_status_t = Enum_xcb_grab_status_t;
pub type Enum_xcb_cursor_enum_t = ::libc::c_uint;
pub const XCB_CURSOR_NONE: ::libc::c_uint = 0;
pub type xcb_cursor_enum_t = Enum_xcb_cursor_enum_t;
#[repr(C)]
pub struct Struct_xcb_grab_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_grab_pointer_cookie_t = Struct_xcb_grab_pointer_cookie_t;
#[repr(C)]
pub struct Struct_xcb_grab_pointer_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub event_mask: uint16_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_grab_pointer_request_t = Struct_xcb_grab_pointer_request_t;
#[repr(C)]
pub struct Struct_xcb_grab_pointer_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
pub type xcb_grab_pointer_reply_t = Struct_xcb_grab_pointer_reply_t;
#[repr(C)]
pub struct Struct_xcb_ungrab_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_ungrab_pointer_request_t = Struct_xcb_ungrab_pointer_request_t;
pub type Enum_xcb_button_index_t = ::libc::c_uint;
pub const XCB_BUTTON_INDEX_ANY: ::libc::c_uint = 0;
pub const XCB_BUTTON_INDEX_1: ::libc::c_uint = 1;
pub const XCB_BUTTON_INDEX_2: ::libc::c_uint = 2;
pub const XCB_BUTTON_INDEX_3: ::libc::c_uint = 3;
pub const XCB_BUTTON_INDEX_4: ::libc::c_uint = 4;
pub const XCB_BUTTON_INDEX_5: ::libc::c_uint = 5;
pub type xcb_button_index_t = Enum_xcb_button_index_t;
#[repr(C)]
pub struct Struct_xcb_grab_button_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub event_mask: uint16_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub button: uint8_t,
    pub pad0: uint8_t,
    pub modifiers: uint16_t,
}
pub type xcb_grab_button_request_t = Struct_xcb_grab_button_request_t;
#[repr(C)]
pub struct Struct_xcb_ungrab_button_request_t {
    pub major_opcode: uint8_t,
    pub button: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_ungrab_button_request_t = Struct_xcb_ungrab_button_request_t;
#[repr(C)]
pub struct Struct_xcb_change_active_pointer_grab_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
    pub event_mask: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_change_active_pointer_grab_request_t =
    Struct_xcb_change_active_pointer_grab_request_t;
#[repr(C)]
pub struct Struct_xcb_grab_keyboard_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_grab_keyboard_cookie_t = Struct_xcb_grab_keyboard_cookie_t;
#[repr(C)]
pub struct Struct_xcb_grab_keyboard_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_grab_keyboard_request_t = Struct_xcb_grab_keyboard_request_t;
#[repr(C)]
pub struct Struct_xcb_grab_keyboard_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
pub type xcb_grab_keyboard_reply_t = Struct_xcb_grab_keyboard_reply_t;
#[repr(C)]
pub struct Struct_xcb_ungrab_keyboard_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_ungrab_keyboard_request_t = Struct_xcb_ungrab_keyboard_request_t;
pub type Enum_xcb_grab_t = ::libc::c_uint;
pub const XCB_GRAB_ANY: ::libc::c_uint = 0;
pub type xcb_grab_t = Enum_xcb_grab_t;
#[repr(C)]
pub struct Struct_xcb_grab_key_request_t {
    pub major_opcode: uint8_t,
    pub owner_events: uint8_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub key: xcb_keycode_t,
    pub pointer_mode: uint8_t,
    pub keyboard_mode: uint8_t,
    pub pad0: [uint8_t, ..3u],
}
pub type xcb_grab_key_request_t = Struct_xcb_grab_key_request_t;
#[repr(C)]
pub struct Struct_xcb_ungrab_key_request_t {
    pub major_opcode: uint8_t,
    pub key: xcb_keycode_t,
    pub length: uint16_t,
    pub grab_window: xcb_window_t,
    pub modifiers: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_ungrab_key_request_t = Struct_xcb_ungrab_key_request_t;
pub type Enum_xcb_allow_t = ::libc::c_uint;
pub const XCB_ALLOW_ASYNC_POINTER: ::libc::c_uint = 0;
pub const XCB_ALLOW_SYNC_POINTER: ::libc::c_uint = 1;
pub const XCB_ALLOW_REPLAY_POINTER: ::libc::c_uint = 2;
pub const XCB_ALLOW_ASYNC_KEYBOARD: ::libc::c_uint = 3;
pub const XCB_ALLOW_SYNC_KEYBOARD: ::libc::c_uint = 4;
pub const XCB_ALLOW_REPLAY_KEYBOARD: ::libc::c_uint = 5;
pub const XCB_ALLOW_ASYNC_BOTH: ::libc::c_uint = 6;
pub const XCB_ALLOW_SYNC_BOTH: ::libc::c_uint = 7;
pub type xcb_allow_t = Enum_xcb_allow_t;
#[repr(C)]
pub struct Struct_xcb_allow_events_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_allow_events_request_t = Struct_xcb_allow_events_request_t;
#[repr(C)]
pub struct Struct_xcb_grab_server_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_grab_server_request_t = Struct_xcb_grab_server_request_t;
#[repr(C)]
pub struct Struct_xcb_ungrab_server_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_ungrab_server_request_t = Struct_xcb_ungrab_server_request_t;
#[repr(C)]
pub struct Struct_xcb_query_pointer_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_pointer_cookie_t = Struct_xcb_query_pointer_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_query_pointer_request_t = Struct_xcb_query_pointer_request_t;
#[repr(C)]
pub struct Struct_xcb_query_pointer_reply_t {
    pub response_type: uint8_t,
    pub same_screen: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub root: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: int16_t,
    pub root_y: int16_t,
    pub win_x: int16_t,
    pub win_y: int16_t,
    pub mask: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_query_pointer_reply_t = Struct_xcb_query_pointer_reply_t;
#[repr(C)]
pub struct Struct_xcb_timecoord_t {
    pub time: xcb_timestamp_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_timecoord_t = Struct_xcb_timecoord_t;
#[repr(C)]
pub struct Struct_xcb_timecoord_iterator_t {
    pub data: *mut xcb_timecoord_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_timecoord_iterator_t = Struct_xcb_timecoord_iterator_t;
#[repr(C)]
pub struct Struct_xcb_get_motion_events_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_motion_events_cookie_t =
    Struct_xcb_get_motion_events_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_motion_events_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub start: xcb_timestamp_t,
    pub stop: xcb_timestamp_t,
}
pub type xcb_get_motion_events_request_t =
    Struct_xcb_get_motion_events_request_t;
#[repr(C)]
pub struct Struct_xcb_get_motion_events_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub events_len: uint32_t,
    pub pad1: [uint8_t, ..20u],
}
pub type xcb_get_motion_events_reply_t = Struct_xcb_get_motion_events_reply_t;
#[repr(C)]
pub struct Struct_xcb_translate_coordinates_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_translate_coordinates_cookie_t =
    Struct_xcb_translate_coordinates_cookie_t;
#[repr(C)]
pub struct Struct_xcb_translate_coordinates_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
}
pub type xcb_translate_coordinates_request_t =
    Struct_xcb_translate_coordinates_request_t;
#[repr(C)]
pub struct Struct_xcb_translate_coordinates_reply_t {
    pub response_type: uint8_t,
    pub same_screen: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub child: xcb_window_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
}
pub type xcb_translate_coordinates_reply_t =
    Struct_xcb_translate_coordinates_reply_t;
#[repr(C)]
pub struct Struct_xcb_warp_pointer_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub src_width: uint16_t,
    pub src_height: uint16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
}
pub type xcb_warp_pointer_request_t = Struct_xcb_warp_pointer_request_t;
pub type Enum_xcb_input_focus_t = ::libc::c_uint;
pub const XCB_INPUT_FOCUS_NONE: ::libc::c_uint = 0;
pub const XCB_INPUT_FOCUS_POINTER_ROOT: ::libc::c_uint = 1;
pub const XCB_INPUT_FOCUS_PARENT: ::libc::c_uint = 2;
pub const XCB_INPUT_FOCUS_FOLLOW_KEYBOARD: ::libc::c_uint = 3;
pub type xcb_input_focus_t = Enum_xcb_input_focus_t;
#[repr(C)]
pub struct Struct_xcb_set_input_focus_request_t {
    pub major_opcode: uint8_t,
    pub revert_to: uint8_t,
    pub length: uint16_t,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
}
pub type xcb_set_input_focus_request_t = Struct_xcb_set_input_focus_request_t;
#[repr(C)]
pub struct Struct_xcb_get_input_focus_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_input_focus_cookie_t = Struct_xcb_get_input_focus_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_input_focus_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_input_focus_request_t = Struct_xcb_get_input_focus_request_t;
#[repr(C)]
pub struct Struct_xcb_get_input_focus_reply_t {
    pub response_type: uint8_t,
    pub revert_to: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub focus: xcb_window_t,
}
pub type xcb_get_input_focus_reply_t = Struct_xcb_get_input_focus_reply_t;
#[repr(C)]
pub struct Struct_xcb_query_keymap_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_keymap_cookie_t = Struct_xcb_query_keymap_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_keymap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_query_keymap_request_t = Struct_xcb_query_keymap_request_t;
#[repr(C)]
pub struct Struct_xcb_query_keymap_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub keys: [uint8_t, ..32u],
}
pub type xcb_query_keymap_reply_t = Struct_xcb_query_keymap_reply_t;
#[repr(C)]
pub struct Struct_xcb_open_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub fid: xcb_font_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_open_font_request_t = Struct_xcb_open_font_request_t;
#[repr(C)]
pub struct Struct_xcb_close_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font: xcb_font_t,
}
pub type xcb_close_font_request_t = Struct_xcb_close_font_request_t;
pub type Enum_xcb_font_draw_t = ::libc::c_uint;
pub const XCB_FONT_DRAW_LEFT_TO_RIGHT: ::libc::c_uint = 0;
pub const XCB_FONT_DRAW_RIGHT_TO_LEFT: ::libc::c_uint = 1;
pub type xcb_font_draw_t = Enum_xcb_font_draw_t;
#[repr(C)]
pub struct Struct_xcb_fontprop_t {
    pub name: xcb_atom_t,
    pub value: uint32_t,
}
pub type xcb_fontprop_t = Struct_xcb_fontprop_t;
#[repr(C)]
pub struct Struct_xcb_fontprop_iterator_t {
    pub data: *mut xcb_fontprop_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_fontprop_iterator_t = Struct_xcb_fontprop_iterator_t;
#[repr(C)]
pub struct Struct_xcb_charinfo_t {
    pub left_side_bearing: int16_t,
    pub right_side_bearing: int16_t,
    pub character_width: int16_t,
    pub ascent: int16_t,
    pub descent: int16_t,
    pub attributes: uint16_t,
}
pub type xcb_charinfo_t = Struct_xcb_charinfo_t;
#[repr(C)]
pub struct Struct_xcb_charinfo_iterator_t {
    pub data: *mut xcb_charinfo_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_charinfo_iterator_t = Struct_xcb_charinfo_iterator_t;
#[repr(C)]
pub struct Struct_xcb_query_font_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_font_cookie_t = Struct_xcb_query_font_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_font_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font: xcb_fontable_t,
}
pub type xcb_query_font_request_t = Struct_xcb_query_font_request_t;
#[repr(C)]
pub struct Struct_xcb_query_font_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub min_bounds: xcb_charinfo_t,
    pub pad1: [uint8_t, ..4u],
    pub max_bounds: xcb_charinfo_t,
    pub pad2: [uint8_t, ..4u],
    pub min_char_or_byte2: uint16_t,
    pub max_char_or_byte2: uint16_t,
    pub default_char: uint16_t,
    pub properties_len: uint16_t,
    pub draw_direction: uint8_t,
    pub min_byte1: uint8_t,
    pub max_byte1: uint8_t,
    pub all_chars_exist: uint8_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub char_infos_len: uint32_t,
}
pub type xcb_query_font_reply_t = Struct_xcb_query_font_reply_t;
#[repr(C)]
pub struct Struct_xcb_query_text_extents_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_text_extents_cookie_t =
    Struct_xcb_query_text_extents_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_text_extents_request_t {
    pub major_opcode: uint8_t,
    pub odd_length: uint8_t,
    pub length: uint16_t,
    pub font: xcb_fontable_t,
}
pub type xcb_query_text_extents_request_t =
    Struct_xcb_query_text_extents_request_t;
#[repr(C)]
pub struct Struct_xcb_query_text_extents_reply_t {
    pub response_type: uint8_t,
    pub draw_direction: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub overall_ascent: int16_t,
    pub overall_descent: int16_t,
    pub overall_width: int32_t,
    pub overall_left: int32_t,
    pub overall_right: int32_t,
}
pub type xcb_query_text_extents_reply_t =
    Struct_xcb_query_text_extents_reply_t;
#[repr(C)]
pub struct Struct_xcb_str_t {
    pub name_len: uint8_t,
}
pub type xcb_str_t = Struct_xcb_str_t;
#[repr(C)]
pub struct Struct_xcb_str_iterator_t {
    pub data: *mut xcb_str_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_str_iterator_t = Struct_xcb_str_iterator_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_fonts_cookie_t = Struct_xcb_list_fonts_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub max_names: uint16_t,
    pub pattern_len: uint16_t,
}
pub type xcb_list_fonts_request_t = Struct_xcb_list_fonts_request_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub names_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_list_fonts_reply_t = Struct_xcb_list_fonts_reply_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_with_info_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_fonts_with_info_cookie_t =
    Struct_xcb_list_fonts_with_info_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_with_info_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub max_names: uint16_t,
    pub pattern_len: uint16_t,
}
pub type xcb_list_fonts_with_info_request_t =
    Struct_xcb_list_fonts_with_info_request_t;
#[repr(C)]
pub struct Struct_xcb_list_fonts_with_info_reply_t {
    pub response_type: uint8_t,
    pub name_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub min_bounds: xcb_charinfo_t,
    pub pad0: [uint8_t, ..4u],
    pub max_bounds: xcb_charinfo_t,
    pub pad1: [uint8_t, ..4u],
    pub min_char_or_byte2: uint16_t,
    pub max_char_or_byte2: uint16_t,
    pub default_char: uint16_t,
    pub properties_len: uint16_t,
    pub draw_direction: uint8_t,
    pub min_byte1: uint8_t,
    pub max_byte1: uint8_t,
    pub all_chars_exist: uint8_t,
    pub font_ascent: int16_t,
    pub font_descent: int16_t,
    pub replies_hint: uint32_t,
}
pub type xcb_list_fonts_with_info_reply_t =
    Struct_xcb_list_fonts_with_info_reply_t;
#[repr(C)]
pub struct Struct_xcb_set_font_path_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub font_qty: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_set_font_path_request_t = Struct_xcb_set_font_path_request_t;
#[repr(C)]
pub struct Struct_xcb_get_font_path_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_font_path_cookie_t = Struct_xcb_get_font_path_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_font_path_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_font_path_request_t = Struct_xcb_get_font_path_request_t;
#[repr(C)]
pub struct Struct_xcb_get_font_path_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub path_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_get_font_path_reply_t = Struct_xcb_get_font_path_reply_t;
#[repr(C)]
pub struct Struct_xcb_create_pixmap_request_t {
    pub major_opcode: uint8_t,
    pub depth: uint8_t,
    pub length: uint16_t,
    pub pid: xcb_pixmap_t,
    pub drawable: xcb_drawable_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_create_pixmap_request_t = Struct_xcb_create_pixmap_request_t;
#[repr(C)]
pub struct Struct_xcb_free_pixmap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub pixmap: xcb_pixmap_t,
}
pub type xcb_free_pixmap_request_t = Struct_xcb_free_pixmap_request_t;
pub type Enum_xcb_gc_t = ::libc::c_uint;
pub const XCB_GC_FUNCTION: ::libc::c_uint = 1;
pub const XCB_GC_PLANE_MASK: ::libc::c_uint = 2;
pub const XCB_GC_FOREGROUND: ::libc::c_uint = 4;
pub const XCB_GC_BACKGROUND: ::libc::c_uint = 8;
pub const XCB_GC_LINE_WIDTH: ::libc::c_uint = 16;
pub const XCB_GC_LINE_STYLE: ::libc::c_uint = 32;
pub const XCB_GC_CAP_STYLE: ::libc::c_uint = 64;
pub const XCB_GC_JOIN_STYLE: ::libc::c_uint = 128;
pub const XCB_GC_FILL_STYLE: ::libc::c_uint = 256;
pub const XCB_GC_FILL_RULE: ::libc::c_uint = 512;
pub const XCB_GC_TILE: ::libc::c_uint = 1024;
pub const XCB_GC_STIPPLE: ::libc::c_uint = 2048;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_X: ::libc::c_uint = 4096;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_Y: ::libc::c_uint = 8192;
pub const XCB_GC_FONT: ::libc::c_uint = 16384;
pub const XCB_GC_SUBWINDOW_MODE: ::libc::c_uint = 32768;
pub const XCB_GC_GRAPHICS_EXPOSURES: ::libc::c_uint = 65536;
pub const XCB_GC_CLIP_ORIGIN_X: ::libc::c_uint = 131072;
pub const XCB_GC_CLIP_ORIGIN_Y: ::libc::c_uint = 262144;
pub const XCB_GC_CLIP_MASK: ::libc::c_uint = 524288;
pub const XCB_GC_DASH_OFFSET: ::libc::c_uint = 1048576;
pub const XCB_GC_DASH_LIST: ::libc::c_uint = 2097152;
pub const XCB_GC_ARC_MODE: ::libc::c_uint = 4194304;
pub type xcb_gc_t = Enum_xcb_gc_t;
pub type Enum_xcb_gx_t = ::libc::c_uint;
pub const XCB_GX_CLEAR: ::libc::c_uint = 0;
pub const XCB_GX_AND: ::libc::c_uint = 1;
pub const XCB_GX_AND_REVERSE: ::libc::c_uint = 2;
pub const XCB_GX_COPY: ::libc::c_uint = 3;
pub const XCB_GX_AND_INVERTED: ::libc::c_uint = 4;
pub const XCB_GX_NOOP: ::libc::c_uint = 5;
pub const XCB_GX_XOR: ::libc::c_uint = 6;
pub const XCB_GX_OR: ::libc::c_uint = 7;
pub const XCB_GX_NOR: ::libc::c_uint = 8;
pub const XCB_GX_EQUIV: ::libc::c_uint = 9;
pub const XCB_GX_INVERT: ::libc::c_uint = 10;
pub const XCB_GX_OR_REVERSE: ::libc::c_uint = 11;
pub const XCB_GX_COPY_INVERTED: ::libc::c_uint = 12;
pub const XCB_GX_OR_INVERTED: ::libc::c_uint = 13;
pub const XCB_GX_NAND: ::libc::c_uint = 14;
pub const XCB_GX_SET: ::libc::c_uint = 15;
pub type xcb_gx_t = Enum_xcb_gx_t;
pub type Enum_xcb_line_style_t = ::libc::c_uint;
pub const XCB_LINE_STYLE_SOLID: ::libc::c_uint = 0;
pub const XCB_LINE_STYLE_ON_OFF_DASH: ::libc::c_uint = 1;
pub const XCB_LINE_STYLE_DOUBLE_DASH: ::libc::c_uint = 2;
pub type xcb_line_style_t = Enum_xcb_line_style_t;
pub type Enum_xcb_cap_style_t = ::libc::c_uint;
pub const XCB_CAP_STYLE_NOT_LAST: ::libc::c_uint = 0;
pub const XCB_CAP_STYLE_BUTT: ::libc::c_uint = 1;
pub const XCB_CAP_STYLE_ROUND: ::libc::c_uint = 2;
pub const XCB_CAP_STYLE_PROJECTING: ::libc::c_uint = 3;
pub type xcb_cap_style_t = Enum_xcb_cap_style_t;
pub type Enum_xcb_join_style_t = ::libc::c_uint;
pub const XCB_JOIN_STYLE_MITER: ::libc::c_uint = 0;
pub const XCB_JOIN_STYLE_ROUND: ::libc::c_uint = 1;
pub const XCB_JOIN_STYLE_BEVEL: ::libc::c_uint = 2;
pub type xcb_join_style_t = Enum_xcb_join_style_t;
pub type Enum_xcb_fill_style_t = ::libc::c_uint;
pub const XCB_FILL_STYLE_SOLID: ::libc::c_uint = 0;
pub const XCB_FILL_STYLE_TILED: ::libc::c_uint = 1;
pub const XCB_FILL_STYLE_STIPPLED: ::libc::c_uint = 2;
pub const XCB_FILL_STYLE_OPAQUE_STIPPLED: ::libc::c_uint = 3;
pub type xcb_fill_style_t = Enum_xcb_fill_style_t;
pub type Enum_xcb_fill_rule_t = ::libc::c_uint;
pub const XCB_FILL_RULE_EVEN_ODD: ::libc::c_uint = 0;
pub const XCB_FILL_RULE_WINDING: ::libc::c_uint = 1;
pub type xcb_fill_rule_t = Enum_xcb_fill_rule_t;
pub type Enum_xcb_subwindow_mode_t = ::libc::c_uint;
pub const XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN: ::libc::c_uint = 0;
pub const XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS: ::libc::c_uint = 1;
pub type xcb_subwindow_mode_t = Enum_xcb_subwindow_mode_t;
pub type Enum_xcb_arc_mode_t = ::libc::c_uint;
pub const XCB_ARC_MODE_CHORD: ::libc::c_uint = 0;
pub const XCB_ARC_MODE_PIE_SLICE: ::libc::c_uint = 1;
pub type xcb_arc_mode_t = Enum_xcb_arc_mode_t;
#[repr(C)]
pub struct Struct_xcb_create_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_gcontext_t,
    pub drawable: xcb_drawable_t,
    pub value_mask: uint32_t,
}
pub type xcb_create_gc_request_t = Struct_xcb_create_gc_request_t;
#[repr(C)]
pub struct Struct_xcb_change_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub value_mask: uint32_t,
}
pub type xcb_change_gc_request_t = Struct_xcb_change_gc_request_t;
#[repr(C)]
pub struct Struct_xcb_copy_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_gc: xcb_gcontext_t,
    pub dst_gc: xcb_gcontext_t,
    pub value_mask: uint32_t,
}
pub type xcb_copy_gc_request_t = Struct_xcb_copy_gc_request_t;
#[repr(C)]
pub struct Struct_xcb_set_dashes_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub dash_offset: uint16_t,
    pub dashes_len: uint16_t,
}
pub type xcb_set_dashes_request_t = Struct_xcb_set_dashes_request_t;
pub type Enum_xcb_clip_ordering_t = ::libc::c_uint;
pub const XCB_CLIP_ORDERING_UNSORTED: ::libc::c_uint = 0;
pub const XCB_CLIP_ORDERING_Y_SORTED: ::libc::c_uint = 1;
pub const XCB_CLIP_ORDERING_YX_SORTED: ::libc::c_uint = 2;
pub const XCB_CLIP_ORDERING_YX_BANDED: ::libc::c_uint = 3;
pub type xcb_clip_ordering_t = Enum_xcb_clip_ordering_t;
#[repr(C)]
pub struct Struct_xcb_set_clip_rectangles_request_t {
    pub major_opcode: uint8_t,
    pub ordering: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
    pub clip_x_origin: int16_t,
    pub clip_y_origin: int16_t,
}
pub type xcb_set_clip_rectangles_request_t =
    Struct_xcb_set_clip_rectangles_request_t;
#[repr(C)]
pub struct Struct_xcb_free_gc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_free_gc_request_t = Struct_xcb_free_gc_request_t;
#[repr(C)]
pub struct Struct_xcb_clear_area_request_t {
    pub major_opcode: uint8_t,
    pub exposures: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_clear_area_request_t = Struct_xcb_clear_area_request_t;
#[repr(C)]
pub struct Struct_xcb_copy_area_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_copy_area_request_t = Struct_xcb_copy_area_request_t;
#[repr(C)]
pub struct Struct_xcb_copy_plane_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: int16_t,
    pub src_y: int16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub bit_plane: uint32_t,
}
pub type xcb_copy_plane_request_t = Struct_xcb_copy_plane_request_t;
pub type Enum_xcb_coord_mode_t = ::libc::c_uint;
pub const XCB_COORD_MODE_ORIGIN: ::libc::c_uint = 0;
pub const XCB_COORD_MODE_PREVIOUS: ::libc::c_uint = 1;
pub type xcb_coord_mode_t = Enum_xcb_coord_mode_t;
#[repr(C)]
pub struct Struct_xcb_poly_point_request_t {
    pub major_opcode: uint8_t,
    pub coordinate_mode: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_point_request_t = Struct_xcb_poly_point_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_line_request_t {
    pub major_opcode: uint8_t,
    pub coordinate_mode: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_line_request_t = Struct_xcb_poly_line_request_t;
#[repr(C)]
pub struct Struct_xcb_segment_t {
    pub x1: int16_t,
    pub y1: int16_t,
    pub x2: int16_t,
    pub y2: int16_t,
}
pub type xcb_segment_t = Struct_xcb_segment_t;
#[repr(C)]
pub struct Struct_xcb_segment_iterator_t {
    pub data: *mut xcb_segment_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_segment_iterator_t = Struct_xcb_segment_iterator_t;
#[repr(C)]
pub struct Struct_xcb_poly_segment_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_segment_request_t = Struct_xcb_poly_segment_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_rectangle_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_rectangle_request_t = Struct_xcb_poly_rectangle_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_arc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_arc_request_t = Struct_xcb_poly_arc_request_t;
pub type Enum_xcb_poly_shape_t = ::libc::c_uint;
pub const XCB_POLY_SHAPE_COMPLEX: ::libc::c_uint = 0;
pub const XCB_POLY_SHAPE_NONCONVEX: ::libc::c_uint = 1;
pub const XCB_POLY_SHAPE_CONVEX: ::libc::c_uint = 2;
pub type xcb_poly_shape_t = Enum_xcb_poly_shape_t;
#[repr(C)]
pub struct Struct_xcb_fill_poly_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub shape: uint8_t,
    pub coordinate_mode: uint8_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_fill_poly_request_t = Struct_xcb_fill_poly_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_fill_rectangle_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_fill_rectangle_request_t =
    Struct_xcb_poly_fill_rectangle_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_fill_arc_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
pub type xcb_poly_fill_arc_request_t = Struct_xcb_poly_fill_arc_request_t;
pub type Enum_xcb_image_format_t = ::libc::c_uint;
pub const XCB_IMAGE_FORMAT_XY_BITMAP: ::libc::c_uint = 0;
pub const XCB_IMAGE_FORMAT_XY_PIXMAP: ::libc::c_uint = 1;
pub const XCB_IMAGE_FORMAT_Z_PIXMAP: ::libc::c_uint = 2;
pub type xcb_image_format_t = Enum_xcb_image_format_t;
#[repr(C)]
pub struct Struct_xcb_put_image_request_t {
    pub major_opcode: uint8_t,
    pub format: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub dst_x: int16_t,
    pub dst_y: int16_t,
    pub left_pad: uint8_t,
    pub depth: uint8_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_put_image_request_t = Struct_xcb_put_image_request_t;
#[repr(C)]
pub struct Struct_xcb_get_image_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_image_cookie_t = Struct_xcb_get_image_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_image_request_t {
    pub major_opcode: uint8_t,
    pub format: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub x: int16_t,
    pub y: int16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub plane_mask: uint32_t,
}
pub type xcb_get_image_request_t = Struct_xcb_get_image_request_t;
#[repr(C)]
pub struct Struct_xcb_get_image_reply_t {
    pub response_type: uint8_t,
    pub depth: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub visual: xcb_visualid_t,
    pub pad0: [uint8_t, ..20u],
}
pub type xcb_get_image_reply_t = Struct_xcb_get_image_reply_t;
#[repr(C)]
pub struct Struct_xcb_poly_text_8_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_poly_text_8_request_t = Struct_xcb_poly_text_8_request_t;
#[repr(C)]
pub struct Struct_xcb_poly_text_16_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_poly_text_16_request_t = Struct_xcb_poly_text_16_request_t;
#[repr(C)]
pub struct Struct_xcb_image_text_8_request_t {
    pub major_opcode: uint8_t,
    pub string_len: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_image_text_8_request_t = Struct_xcb_image_text_8_request_t;
#[repr(C)]
pub struct Struct_xcb_image_text_16_request_t {
    pub major_opcode: uint8_t,
    pub string_len: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: int16_t,
    pub y: int16_t,
}
pub type xcb_image_text_16_request_t = Struct_xcb_image_text_16_request_t;
pub type Enum_xcb_colormap_alloc_t = ::libc::c_uint;
pub const XCB_COLORMAP_ALLOC_NONE: ::libc::c_uint = 0;
pub const XCB_COLORMAP_ALLOC_ALL: ::libc::c_uint = 1;
pub type xcb_colormap_alloc_t = Enum_xcb_colormap_alloc_t;
#[repr(C)]
pub struct Struct_xcb_create_colormap_request_t {
    pub major_opcode: uint8_t,
    pub alloc: uint8_t,
    pub length: uint16_t,
    pub mid: xcb_colormap_t,
    pub window: xcb_window_t,
    pub visual: xcb_visualid_t,
}
pub type xcb_create_colormap_request_t = Struct_xcb_create_colormap_request_t;
#[repr(C)]
pub struct Struct_xcb_free_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
pub type xcb_free_colormap_request_t = Struct_xcb_free_colormap_request_t;
#[repr(C)]
pub struct Struct_xcb_copy_colormap_and_free_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub mid: xcb_colormap_t,
    pub src_cmap: xcb_colormap_t,
}
pub type xcb_copy_colormap_and_free_request_t =
    Struct_xcb_copy_colormap_and_free_request_t;
#[repr(C)]
pub struct Struct_xcb_install_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
pub type xcb_install_colormap_request_t =
    Struct_xcb_install_colormap_request_t;
#[repr(C)]
pub struct Struct_xcb_uninstall_colormap_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
pub type xcb_uninstall_colormap_request_t =
    Struct_xcb_uninstall_colormap_request_t;
#[repr(C)]
pub struct Struct_xcb_list_installed_colormaps_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_installed_colormaps_cookie_t =
    Struct_xcb_list_installed_colormaps_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_installed_colormaps_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
}
pub type xcb_list_installed_colormaps_request_t =
    Struct_xcb_list_installed_colormaps_request_t;
#[repr(C)]
pub struct Struct_xcb_list_installed_colormaps_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub cmaps_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_list_installed_colormaps_reply_t =
    Struct_xcb_list_installed_colormaps_reply_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_alloc_color_cookie_t = Struct_xcb_alloc_color_cookie_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_alloc_color_request_t = Struct_xcb_alloc_color_request_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad1: [uint8_t, ..2u],
    pub pixel: uint32_t,
}
pub type xcb_alloc_color_reply_t = Struct_xcb_alloc_color_reply_t;
#[repr(C)]
pub struct Struct_xcb_alloc_named_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_alloc_named_color_cookie_t =
    Struct_xcb_alloc_named_color_cookie_t;
#[repr(C)]
pub struct Struct_xcb_alloc_named_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_alloc_named_color_request_t =
    Struct_xcb_alloc_named_color_request_t;
#[repr(C)]
pub struct Struct_xcb_alloc_named_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixel: uint32_t,
    pub exact_red: uint16_t,
    pub exact_green: uint16_t,
    pub exact_blue: uint16_t,
    pub visual_red: uint16_t,
    pub visual_green: uint16_t,
    pub visual_blue: uint16_t,
}
pub type xcb_alloc_named_color_reply_t = Struct_xcb_alloc_named_color_reply_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_cells_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_alloc_color_cells_cookie_t =
    Struct_xcb_alloc_color_cells_cookie_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_cells_request_t {
    pub major_opcode: uint8_t,
    pub contiguous: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub colors: uint16_t,
    pub planes: uint16_t,
}
pub type xcb_alloc_color_cells_request_t =
    Struct_xcb_alloc_color_cells_request_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_cells_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixels_len: uint16_t,
    pub masks_len: uint16_t,
    pub pad1: [uint8_t, ..20u],
}
pub type xcb_alloc_color_cells_reply_t = Struct_xcb_alloc_color_cells_reply_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_planes_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_alloc_color_planes_cookie_t =
    Struct_xcb_alloc_color_planes_cookie_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_planes_request_t {
    pub major_opcode: uint8_t,
    pub contiguous: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub colors: uint16_t,
    pub reds: uint16_t,
    pub greens: uint16_t,
    pub blues: uint16_t,
}
pub type xcb_alloc_color_planes_request_t =
    Struct_xcb_alloc_color_planes_request_t;
#[repr(C)]
pub struct Struct_xcb_alloc_color_planes_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pixels_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
    pub red_mask: uint32_t,
    pub green_mask: uint32_t,
    pub blue_mask: uint32_t,
    pub pad2: [uint8_t, ..8u],
}
pub type xcb_alloc_color_planes_reply_t =
    Struct_xcb_alloc_color_planes_reply_t;
#[repr(C)]
pub struct Struct_xcb_free_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub plane_mask: uint32_t,
}
pub type xcb_free_colors_request_t = Struct_xcb_free_colors_request_t;
pub type Enum_xcb_color_flag_t = ::libc::c_uint;
pub const XCB_COLOR_FLAG_RED: ::libc::c_uint = 1;
pub const XCB_COLOR_FLAG_GREEN: ::libc::c_uint = 2;
pub const XCB_COLOR_FLAG_BLUE: ::libc::c_uint = 4;
pub type xcb_color_flag_t = Enum_xcb_color_flag_t;
#[repr(C)]
pub struct Struct_xcb_coloritem_t {
    pub pixel: uint32_t,
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub flags: uint8_t,
    pub pad0: uint8_t,
}
pub type xcb_coloritem_t = Struct_xcb_coloritem_t;
#[repr(C)]
pub struct Struct_xcb_coloritem_iterator_t {
    pub data: *mut xcb_coloritem_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_coloritem_iterator_t = Struct_xcb_coloritem_iterator_t;
#[repr(C)]
pub struct Struct_xcb_store_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
pub type xcb_store_colors_request_t = Struct_xcb_store_colors_request_t;
#[repr(C)]
pub struct Struct_xcb_store_named_color_request_t {
    pub major_opcode: uint8_t,
    pub flags: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub pixel: uint32_t,
    pub name_len: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_store_named_color_request_t =
    Struct_xcb_store_named_color_request_t;
#[repr(C)]
pub struct Struct_xcb_rgb_t {
    pub red: uint16_t,
    pub green: uint16_t,
    pub blue: uint16_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_rgb_t = Struct_xcb_rgb_t;
#[repr(C)]
pub struct Struct_xcb_rgb_iterator_t {
    pub data: *mut xcb_rgb_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_rgb_iterator_t = Struct_xcb_rgb_iterator_t;
#[repr(C)]
pub struct Struct_xcb_query_colors_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_colors_cookie_t = Struct_xcb_query_colors_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_colors_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
}
pub type xcb_query_colors_request_t = Struct_xcb_query_colors_request_t;
#[repr(C)]
pub struct Struct_xcb_query_colors_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub colors_len: uint16_t,
    pub pad1: [uint8_t, ..22u],
}
pub type xcb_query_colors_reply_t = Struct_xcb_query_colors_reply_t;
#[repr(C)]
pub struct Struct_xcb_lookup_color_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_lookup_color_cookie_t = Struct_xcb_lookup_color_cookie_t;
#[repr(C)]
pub struct Struct_xcb_lookup_color_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cmap: xcb_colormap_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_lookup_color_request_t = Struct_xcb_lookup_color_request_t;
#[repr(C)]
pub struct Struct_xcb_lookup_color_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub exact_red: uint16_t,
    pub exact_green: uint16_t,
    pub exact_blue: uint16_t,
    pub visual_red: uint16_t,
    pub visual_green: uint16_t,
    pub visual_blue: uint16_t,
}
pub type xcb_lookup_color_reply_t = Struct_xcb_lookup_color_reply_t;
pub type Enum_xcb_pixmap_enum_t = ::libc::c_uint;
pub const XCB_PIXMAP_NONE: ::libc::c_uint = 0;
pub type xcb_pixmap_enum_t = Enum_xcb_pixmap_enum_t;
#[repr(C)]
pub struct Struct_xcb_create_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
    pub source: xcb_pixmap_t,
    pub mask: xcb_pixmap_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
    pub x: uint16_t,
    pub y: uint16_t,
}
pub type xcb_create_cursor_request_t = Struct_xcb_create_cursor_request_t;
pub type Enum_xcb_font_enum_t = ::libc::c_uint;
pub const XCB_FONT_NONE: ::libc::c_uint = 0;
pub type xcb_font_enum_t = Enum_xcb_font_enum_t;
#[repr(C)]
pub struct Struct_xcb_create_glyph_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cid: xcb_cursor_t,
    pub source_font: xcb_font_t,
    pub mask_font: xcb_font_t,
    pub source_char: uint16_t,
    pub mask_char: uint16_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
}
pub type xcb_create_glyph_cursor_request_t =
    Struct_xcb_create_glyph_cursor_request_t;
#[repr(C)]
pub struct Struct_xcb_free_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
}
pub type xcb_free_cursor_request_t = Struct_xcb_free_cursor_request_t;
#[repr(C)]
pub struct Struct_xcb_recolor_cursor_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub cursor: xcb_cursor_t,
    pub fore_red: uint16_t,
    pub fore_green: uint16_t,
    pub fore_blue: uint16_t,
    pub back_red: uint16_t,
    pub back_green: uint16_t,
    pub back_blue: uint16_t,
}
pub type xcb_recolor_cursor_request_t = Struct_xcb_recolor_cursor_request_t;
pub type Enum_xcb_query_shape_of_t = ::libc::c_uint;
pub const XCB_QUERY_SHAPE_OF_LARGEST_CURSOR: ::libc::c_uint = 0;
pub const XCB_QUERY_SHAPE_OF_FASTEST_TILE: ::libc::c_uint = 1;
pub const XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE: ::libc::c_uint = 2;
pub type xcb_query_shape_of_t = Enum_xcb_query_shape_of_t;
#[repr(C)]
pub struct Struct_xcb_query_best_size_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_best_size_cookie_t = Struct_xcb_query_best_size_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_best_size_request_t {
    pub major_opcode: uint8_t,
    pub _class: uint8_t,
    pub length: uint16_t,
    pub drawable: xcb_drawable_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_query_best_size_request_t = Struct_xcb_query_best_size_request_t;
#[repr(C)]
pub struct Struct_xcb_query_best_size_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
pub type xcb_query_best_size_reply_t = Struct_xcb_query_best_size_reply_t;
#[repr(C)]
pub struct Struct_xcb_query_extension_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_query_extension_cookie_t = Struct_xcb_query_extension_cookie_t;
#[repr(C)]
pub struct Struct_xcb_query_extension_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub name_len: uint16_t,
    pub pad1: [uint8_t, ..2u],
}
pub type xcb_query_extension_request_t = Struct_xcb_query_extension_request_t;
#[repr(C)]
pub struct Struct_xcb_query_extension_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub present: uint8_t,
    pub major_opcode: uint8_t,
    pub first_event: uint8_t,
    pub first_error: uint8_t,
}
pub type xcb_query_extension_reply_t = Struct_xcb_query_extension_reply_t;
#[repr(C)]
pub struct Struct_xcb_list_extensions_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_extensions_cookie_t = Struct_xcb_list_extensions_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_extensions_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_list_extensions_request_t = Struct_xcb_list_extensions_request_t;
#[repr(C)]
pub struct Struct_xcb_list_extensions_reply_t {
    pub response_type: uint8_t,
    pub names_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t, ..24u],
}
pub type xcb_list_extensions_reply_t = Struct_xcb_list_extensions_reply_t;
#[repr(C)]
pub struct Struct_xcb_change_keyboard_mapping_request_t {
    pub major_opcode: uint8_t,
    pub keycode_count: uint8_t,
    pub length: uint16_t,
    pub first_keycode: xcb_keycode_t,
    pub keysyms_per_keycode: uint8_t,
    pub pad0: [uint8_t, ..2u],
}
pub type xcb_change_keyboard_mapping_request_t =
    Struct_xcb_change_keyboard_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_keyboard_mapping_cookie_t =
    Struct_xcb_get_keyboard_mapping_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub first_keycode: xcb_keycode_t,
    pub count: uint8_t,
}
pub type xcb_get_keyboard_mapping_request_t =
    Struct_xcb_get_keyboard_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_mapping_reply_t {
    pub response_type: uint8_t,
    pub keysyms_per_keycode: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t, ..24u],
}
pub type xcb_get_keyboard_mapping_reply_t =
    Struct_xcb_get_keyboard_mapping_reply_t;
pub type Enum_xcb_kb_t = ::libc::c_uint;
pub const XCB_KB_KEY_CLICK_PERCENT: ::libc::c_uint = 1;
pub const XCB_KB_BELL_PERCENT: ::libc::c_uint = 2;
pub const XCB_KB_BELL_PITCH: ::libc::c_uint = 4;
pub const XCB_KB_BELL_DURATION: ::libc::c_uint = 8;
pub const XCB_KB_LED: ::libc::c_uint = 16;
pub const XCB_KB_LED_MODE: ::libc::c_uint = 32;
pub const XCB_KB_KEY: ::libc::c_uint = 64;
pub const XCB_KB_AUTO_REPEAT_MODE: ::libc::c_uint = 128;
pub type xcb_kb_t = Enum_xcb_kb_t;
pub type Enum_xcb_led_mode_t = ::libc::c_uint;
pub const XCB_LED_MODE_OFF: ::libc::c_uint = 0;
pub const XCB_LED_MODE_ON: ::libc::c_uint = 1;
pub type xcb_led_mode_t = Enum_xcb_led_mode_t;
pub type Enum_xcb_auto_repeat_mode_t = ::libc::c_uint;
pub const XCB_AUTO_REPEAT_MODE_OFF: ::libc::c_uint = 0;
pub const XCB_AUTO_REPEAT_MODE_ON: ::libc::c_uint = 1;
pub const XCB_AUTO_REPEAT_MODE_DEFAULT: ::libc::c_uint = 2;
pub type xcb_auto_repeat_mode_t = Enum_xcb_auto_repeat_mode_t;
#[repr(C)]
pub struct Struct_xcb_change_keyboard_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub value_mask: uint32_t,
}
pub type xcb_change_keyboard_control_request_t =
    Struct_xcb_change_keyboard_control_request_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_keyboard_control_cookie_t =
    Struct_xcb_get_keyboard_control_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_keyboard_control_request_t =
    Struct_xcb_get_keyboard_control_request_t;
#[repr(C)]
pub struct Struct_xcb_get_keyboard_control_reply_t {
    pub response_type: uint8_t,
    pub global_auto_repeat: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub led_mask: uint32_t,
    pub key_click_percent: uint8_t,
    pub bell_percent: uint8_t,
    pub bell_pitch: uint16_t,
    pub bell_duration: uint16_t,
    pub pad0: [uint8_t, ..2u],
    pub auto_repeats: [uint8_t, ..32u],
}
pub type xcb_get_keyboard_control_reply_t =
    Struct_xcb_get_keyboard_control_reply_t;
#[repr(C)]
pub struct Struct_xcb_bell_request_t {
    pub major_opcode: uint8_t,
    pub percent: int8_t,
    pub length: uint16_t,
}
pub type xcb_bell_request_t = Struct_xcb_bell_request_t;
#[repr(C)]
pub struct Struct_xcb_change_pointer_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub acceleration_numerator: int16_t,
    pub acceleration_denominator: int16_t,
    pub threshold: int16_t,
    pub do_acceleration: uint8_t,
    pub do_threshold: uint8_t,
}
pub type xcb_change_pointer_control_request_t =
    Struct_xcb_change_pointer_control_request_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_control_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_pointer_control_cookie_t =
    Struct_xcb_get_pointer_control_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_control_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_pointer_control_request_t =
    Struct_xcb_get_pointer_control_request_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_control_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub acceleration_numerator: uint16_t,
    pub acceleration_denominator: uint16_t,
    pub threshold: uint16_t,
    pub pad1: [uint8_t, ..18u],
}
pub type xcb_get_pointer_control_reply_t =
    Struct_xcb_get_pointer_control_reply_t;
pub type Enum_xcb_blanking_t = ::libc::c_uint;
pub const XCB_BLANKING_NOT_PREFERRED: ::libc::c_uint = 0;
pub const XCB_BLANKING_PREFERRED: ::libc::c_uint = 1;
pub const XCB_BLANKING_DEFAULT: ::libc::c_uint = 2;
pub type xcb_blanking_t = Enum_xcb_blanking_t;
pub type Enum_xcb_exposures_t = ::libc::c_uint;
pub const XCB_EXPOSURES_NOT_ALLOWED: ::libc::c_uint = 0;
pub const XCB_EXPOSURES_ALLOWED: ::libc::c_uint = 1;
pub const XCB_EXPOSURES_DEFAULT: ::libc::c_uint = 2;
pub type xcb_exposures_t = Enum_xcb_exposures_t;
#[repr(C)]
pub struct Struct_xcb_set_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub timeout: int16_t,
    pub interval: int16_t,
    pub prefer_blanking: uint8_t,
    pub allow_exposures: uint8_t,
}
pub type xcb_set_screen_saver_request_t =
    Struct_xcb_set_screen_saver_request_t;
#[repr(C)]
pub struct Struct_xcb_get_screen_saver_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_screen_saver_cookie_t = Struct_xcb_get_screen_saver_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_screen_saver_request_t =
    Struct_xcb_get_screen_saver_request_t;
#[repr(C)]
pub struct Struct_xcb_get_screen_saver_reply_t {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub timeout: uint16_t,
    pub interval: uint16_t,
    pub prefer_blanking: uint8_t,
    pub allow_exposures: uint8_t,
    pub pad1: [uint8_t, ..18u],
}
pub type xcb_get_screen_saver_reply_t = Struct_xcb_get_screen_saver_reply_t;
pub type Enum_xcb_host_mode_t = ::libc::c_uint;
pub const XCB_HOST_MODE_INSERT: ::libc::c_uint = 0;
pub const XCB_HOST_MODE_DELETE: ::libc::c_uint = 1;
pub type xcb_host_mode_t = Enum_xcb_host_mode_t;
pub type Enum_xcb_family_t = ::libc::c_uint;
pub const XCB_FAMILY_INTERNET: ::libc::c_uint = 0;
pub const XCB_FAMILY_DECNET: ::libc::c_uint = 1;
pub const XCB_FAMILY_CHAOS: ::libc::c_uint = 2;
pub const XCB_FAMILY_SERVER_INTERPRETED: ::libc::c_uint = 5;
pub const XCB_FAMILY_INTERNET_6: ::libc::c_uint = 6;
pub type xcb_family_t = Enum_xcb_family_t;
#[repr(C)]
pub struct Struct_xcb_change_hosts_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
    pub family: uint8_t,
    pub pad0: uint8_t,
    pub address_len: uint16_t,
}
pub type xcb_change_hosts_request_t = Struct_xcb_change_hosts_request_t;
#[repr(C)]
pub struct Struct_xcb_host_t {
    pub family: uint8_t,
    pub pad0: uint8_t,
    pub address_len: uint16_t,
}
pub type xcb_host_t = Struct_xcb_host_t;
#[repr(C)]
pub struct Struct_xcb_host_iterator_t {
    pub data: *mut xcb_host_t,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
pub type xcb_host_iterator_t = Struct_xcb_host_iterator_t;
#[repr(C)]
pub struct Struct_xcb_list_hosts_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_list_hosts_cookie_t = Struct_xcb_list_hosts_cookie_t;
#[repr(C)]
pub struct Struct_xcb_list_hosts_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_list_hosts_request_t = Struct_xcb_list_hosts_request_t;
#[repr(C)]
pub struct Struct_xcb_list_hosts_reply_t {
    pub response_type: uint8_t,
    pub mode: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub hosts_len: uint16_t,
    pub pad0: [uint8_t, ..22u],
}
pub type xcb_list_hosts_reply_t = Struct_xcb_list_hosts_reply_t;
pub type Enum_xcb_access_control_t = ::libc::c_uint;
pub const XCB_ACCESS_CONTROL_DISABLE: ::libc::c_uint = 0;
pub const XCB_ACCESS_CONTROL_ENABLE: ::libc::c_uint = 1;
pub type xcb_access_control_t = Enum_xcb_access_control_t;
#[repr(C)]
pub struct Struct_xcb_set_access_control_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
pub type xcb_set_access_control_request_t =
    Struct_xcb_set_access_control_request_t;
pub type Enum_xcb_close_down_t = ::libc::c_uint;
pub const XCB_CLOSE_DOWN_DESTROY_ALL: ::libc::c_uint = 0;
pub const XCB_CLOSE_DOWN_RETAIN_PERMANENT: ::libc::c_uint = 1;
pub const XCB_CLOSE_DOWN_RETAIN_TEMPORARY: ::libc::c_uint = 2;
pub type xcb_close_down_t = Enum_xcb_close_down_t;
#[repr(C)]
pub struct Struct_xcb_set_close_down_mode_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
pub type xcb_set_close_down_mode_request_t =
    Struct_xcb_set_close_down_mode_request_t;
pub type Enum_xcb_kill_t = ::libc::c_uint;
pub const XCB_KILL_ALL_TEMPORARY: ::libc::c_uint = 0;
pub type xcb_kill_t = Enum_xcb_kill_t;
#[repr(C)]
pub struct Struct_xcb_kill_client_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub resource: uint32_t,
}
pub type xcb_kill_client_request_t = Struct_xcb_kill_client_request_t;
#[repr(C)]
pub struct Struct_xcb_rotate_properties_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
    pub window: xcb_window_t,
    pub atoms_len: uint16_t,
    pub delta: int16_t,
}
pub type xcb_rotate_properties_request_t =
    Struct_xcb_rotate_properties_request_t;
pub type Enum_xcb_screen_saver_t = ::libc::c_uint;
pub const XCB_SCREEN_SAVER_RESET: ::libc::c_uint = 0;
pub const XCB_SCREEN_SAVER_ACTIVE: ::libc::c_uint = 1;
pub type xcb_screen_saver_t = Enum_xcb_screen_saver_t;
#[repr(C)]
pub struct Struct_xcb_force_screen_saver_request_t {
    pub major_opcode: uint8_t,
    pub mode: uint8_t,
    pub length: uint16_t,
}
pub type xcb_force_screen_saver_request_t =
    Struct_xcb_force_screen_saver_request_t;
pub type Enum_xcb_mapping_status_t = ::libc::c_uint;
pub const XCB_MAPPING_STATUS_SUCCESS: ::libc::c_uint = 0;
pub const XCB_MAPPING_STATUS_BUSY: ::libc::c_uint = 1;
pub const XCB_MAPPING_STATUS_FAILURE: ::libc::c_uint = 2;
pub type xcb_mapping_status_t = Enum_xcb_mapping_status_t;
#[repr(C)]
pub struct Struct_xcb_set_pointer_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_set_pointer_mapping_cookie_t =
    Struct_xcb_set_pointer_mapping_cookie_t;
#[repr(C)]
pub struct Struct_xcb_set_pointer_mapping_request_t {
    pub major_opcode: uint8_t,
    pub map_len: uint8_t,
    pub length: uint16_t,
}
pub type xcb_set_pointer_mapping_request_t =
    Struct_xcb_set_pointer_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_set_pointer_mapping_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
pub type xcb_set_pointer_mapping_reply_t =
    Struct_xcb_set_pointer_mapping_reply_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_pointer_mapping_cookie_t =
    Struct_xcb_get_pointer_mapping_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_pointer_mapping_request_t =
    Struct_xcb_get_pointer_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_get_pointer_mapping_reply_t {
    pub response_type: uint8_t,
    pub map_len: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t, ..24u],
}
pub type xcb_get_pointer_mapping_reply_t =
    Struct_xcb_get_pointer_mapping_reply_t;
pub type Enum_xcb_map_index_t = ::libc::c_uint;
pub const XCB_MAP_INDEX_SHIFT: ::libc::c_uint = 0;
pub const XCB_MAP_INDEX_LOCK: ::libc::c_uint = 1;
pub const XCB_MAP_INDEX_CONTROL: ::libc::c_uint = 2;
pub const XCB_MAP_INDEX_1: ::libc::c_uint = 3;
pub const XCB_MAP_INDEX_2: ::libc::c_uint = 4;
pub const XCB_MAP_INDEX_3: ::libc::c_uint = 5;
pub const XCB_MAP_INDEX_4: ::libc::c_uint = 6;
pub const XCB_MAP_INDEX_5: ::libc::c_uint = 7;
pub type xcb_map_index_t = Enum_xcb_map_index_t;
#[repr(C)]
pub struct Struct_xcb_set_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_set_modifier_mapping_cookie_t =
    Struct_xcb_set_modifier_mapping_cookie_t;
#[repr(C)]
pub struct Struct_xcb_set_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub keycodes_per_modifier: uint8_t,
    pub length: uint16_t,
}
pub type xcb_set_modifier_mapping_request_t =
    Struct_xcb_set_modifier_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_set_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub status: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
pub type xcb_set_modifier_mapping_reply_t =
    Struct_xcb_set_modifier_mapping_reply_t;
#[repr(C)]
pub struct Struct_xcb_get_modifier_mapping_cookie_t {
    pub sequence: ::libc::c_uint,
}
pub type xcb_get_modifier_mapping_cookie_t =
    Struct_xcb_get_modifier_mapping_cookie_t;
#[repr(C)]
pub struct Struct_xcb_get_modifier_mapping_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_get_modifier_mapping_request_t =
    Struct_xcb_get_modifier_mapping_request_t;
#[repr(C)]
pub struct Struct_xcb_get_modifier_mapping_reply_t {
    pub response_type: uint8_t,
    pub keycodes_per_modifier: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub pad0: [uint8_t, ..24u],
}
pub type xcb_get_modifier_mapping_reply_t =
    Struct_xcb_get_modifier_mapping_reply_t;
#[repr(C)]
pub struct Struct_xcb_no_operation_request_t {
    pub major_opcode: uint8_t,
    pub pad0: uint8_t,
    pub length: uint16_t,
}
pub type xcb_no_operation_request_t = Struct_xcb_no_operation_request_t;
#[repr(C)]
pub struct Struct_xcb_auth_info_t {
    pub namelen: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub datalen: ::libc::c_int,
    pub data: *mut ::libc::c_char,
}
pub type xcb_auth_info_t = Struct_xcb_auth_info_t;
pub enum Struct_xcb_special_event { }
pub type xcb_special_event_t = Struct_xcb_special_event;
pub enum Struct_xcb_extension_t { }
pub type xcb_extension_t = Struct_xcb_extension_t;
#[link(name = "xcb")]
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_char, ..2u];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char, ..2u];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn readv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                 __count: ::libc::c_int) -> ssize_t;
    pub fn writev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int) -> ssize_t;
    pub fn preadv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn pwritev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                   __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t) ->
     ::libc::c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
    pub fn sched_setparam(__pid: __pid_t, __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param) ->
     ::libc::c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::libc::c_int,
                              __param: *const Struct_sched_param) ->
     ::libc::c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> ::libc::c_int;
    pub fn sched_yield() -> ::libc::c_int;
    pub fn sched_get_priority_max(__algorithm: ::libc::c_int) ->
     ::libc::c_int;
    pub fn sched_get_priority_min(__algorithm: ::libc::c_int) ->
     ::libc::c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec) ->
     ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec) ->
     ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec) ->
     ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) ->
     ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<extern "C" fn
                                                        (arg1:
                                                             *mut ::libc::c_void)
                                                        ->
                                                            *mut ::libc::c_void>,
                          __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pthread_exit(__retval: *mut ::libc::c_void);
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn pthread_detach(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) ->
     ::libc::c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut size_t) ->
     ::libc::c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut Struct_sched_param) ->
     ::libc::c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const Struct_sched_param) ->
     ::libc::c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr: *mut *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::libc::c_void) ->
     ::libc::c_int;
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut size_t) ->
     ::libc::c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr: *mut *mut ::libc::c_void,
                                 __stacksize: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::libc::c_void,
                                 __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::libc::c_int,
                                 __param: *const Struct_sched_param) ->
     ::libc::c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::libc::c_int,
                                 __param: *mut Struct_sched_param) ->
     ::libc::c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<extern "C" fn()>) ->
     ::libc::c_int;
    pub fn pthread_setcancelstate(__state: ::libc::c_int,
                                  __oldstate: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_setcanceltype(__type: ::libc::c_int,
                                 __oldtype: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_cancel(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_testcancel();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t) ->
     ::libc::c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) ->
     ::libc::c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) ->
     ::libc::c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const Struct_timespec) ->
     ::libc::c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) ->
     ::libc::c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::libc::c_int,
                                        __old_ceiling: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec) ->
     ::libc::c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec) ->
     ::libc::c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t) ->
     ::libc::c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) ->
     ::libc::c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const Struct_timespec) ->
     ::libc::c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) ->
     ::libc::c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) ->
     ::libc::c_int;
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t) ->
     ::libc::c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t) ->
     ::libc::c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) ->
     ::libc::c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) ->
     ::libc::c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) ->
     ::libc::c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) ->
     ::libc::c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::libc::c_uint) -> ::libc::c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) ->
     ::libc::c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) ->
     ::libc::c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) ->
     ::libc::c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) ->
     ::libc::c_int;
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::libc::c_int) ->
     ::libc::c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 *mut ::libc::c_void)>)
     -> ::libc::c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::libc::c_int;
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::libc::c_void;
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t) ->
     ::libc::c_int;
    pub fn pthread_atfork(__prepare: ::std::option::Option<extern "C" fn()>,
                          __parent: ::std::option::Option<extern "C" fn()>,
                          __child: ::std::option::Option<extern "C" fn()>) ->
     ::libc::c_int;
    pub fn xcb_char2b_next(i: *mut xcb_char2b_iterator_t);
    pub fn xcb_char2b_end(i: xcb_char2b_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_window_next(i: *mut xcb_window_iterator_t);
    pub fn xcb_window_end(i: xcb_window_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_pixmap_next(i: *mut xcb_pixmap_iterator_t);
    pub fn xcb_pixmap_end(i: xcb_pixmap_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_cursor_next(i: *mut xcb_cursor_iterator_t);
    pub fn xcb_cursor_end(i: xcb_cursor_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_font_next(i: *mut xcb_font_iterator_t);
    pub fn xcb_font_end(i: xcb_font_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_gcontext_next(i: *mut xcb_gcontext_iterator_t);
    pub fn xcb_gcontext_end(i: xcb_gcontext_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_colormap_next(i: *mut xcb_colormap_iterator_t);
    pub fn xcb_colormap_end(i: xcb_colormap_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_atom_next(i: *mut xcb_atom_iterator_t);
    pub fn xcb_atom_end(i: xcb_atom_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_drawable_next(i: *mut xcb_drawable_iterator_t);
    pub fn xcb_drawable_end(i: xcb_drawable_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_fontable_next(i: *mut xcb_fontable_iterator_t);
    pub fn xcb_fontable_end(i: xcb_fontable_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_visualid_next(i: *mut xcb_visualid_iterator_t);
    pub fn xcb_visualid_end(i: xcb_visualid_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_timestamp_next(i: *mut xcb_timestamp_iterator_t);
    pub fn xcb_timestamp_end(i: xcb_timestamp_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_keysym_next(i: *mut xcb_keysym_iterator_t);
    pub fn xcb_keysym_end(i: xcb_keysym_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_keycode_next(i: *mut xcb_keycode_iterator_t);
    pub fn xcb_keycode_end(i: xcb_keycode_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_button_next(i: *mut xcb_button_iterator_t);
    pub fn xcb_button_end(i: xcb_button_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_point_next(i: *mut xcb_point_iterator_t);
    pub fn xcb_point_end(i: xcb_point_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_rectangle_next(i: *mut xcb_rectangle_iterator_t);
    pub fn xcb_rectangle_end(i: xcb_rectangle_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_arc_next(i: *mut xcb_arc_iterator_t);
    pub fn xcb_arc_end(i: xcb_arc_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_format_next(i: *mut xcb_format_iterator_t);
    pub fn xcb_format_end(i: xcb_format_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_visualtype_next(i: *mut xcb_visualtype_iterator_t);
    pub fn xcb_visualtype_end(i: xcb_visualtype_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_depth_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_depth_visuals(R: *const xcb_depth_t) -> *mut xcb_visualtype_t;
    pub fn xcb_depth_visuals_length(R: *const xcb_depth_t) -> ::libc::c_int;
    pub fn xcb_depth_visuals_iterator(R: *const xcb_depth_t) ->
     xcb_visualtype_iterator_t;
    pub fn xcb_depth_next(i: *mut xcb_depth_iterator_t);
    pub fn xcb_depth_end(i: xcb_depth_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_screen_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_screen_allowed_depths_length(R: *const xcb_screen_t) ->
     ::libc::c_int;
    pub fn xcb_screen_allowed_depths_iterator(R: *const xcb_screen_t) ->
     xcb_depth_iterator_t;
    pub fn xcb_screen_next(i: *mut xcb_screen_iterator_t);
    pub fn xcb_screen_end(i: xcb_screen_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_name(R:
                                                             *const xcb_setup_request_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_request_authorization_protocol_name_length(R:
                                                                    *const xcb_setup_request_t)
     -> ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_name_end(R:
                                                                 *const xcb_setup_request_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_authorization_protocol_data(R:
                                                             *const xcb_setup_request_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_request_authorization_protocol_data_length(R:
                                                                    *const xcb_setup_request_t)
     -> ::libc::c_int;
    pub fn xcb_setup_request_authorization_protocol_data_end(R:
                                                                 *const xcb_setup_request_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_request_next(i: *mut xcb_setup_request_iterator_t);
    pub fn xcb_setup_request_end(i: xcb_setup_request_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_setup_failed_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_setup_failed_reason(R: *const xcb_setup_failed_t) ->
     *mut ::libc::c_char;
    pub fn xcb_setup_failed_reason_length(R: *const xcb_setup_failed_t) ->
     ::libc::c_int;
    pub fn xcb_setup_failed_reason_end(R: *const xcb_setup_failed_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_setup_failed_next(i: *mut xcb_setup_failed_iterator_t);
    pub fn xcb_setup_failed_end(i: xcb_setup_failed_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_setup_authenticate_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_setup_authenticate_reason(R: *const xcb_setup_authenticate_t)
     -> *mut ::libc::c_char;
    pub fn xcb_setup_authenticate_reason_length(R:
                                                    *const xcb_setup_authenticate_t)
     -> ::libc::c_int;
    pub fn xcb_setup_authenticate_reason_end(R:
                                                 *const xcb_setup_authenticate_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_setup_authenticate_next(i:
                                           *mut xcb_setup_authenticate_iterator_t);
    pub fn xcb_setup_authenticate_end(i: xcb_setup_authenticate_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_setup_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_setup_vendor(R: *const xcb_setup_t) -> *mut ::libc::c_char;
    pub fn xcb_setup_vendor_length(R: *const xcb_setup_t) -> ::libc::c_int;
    pub fn xcb_setup_vendor_end(R: *const xcb_setup_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_setup_pixmap_formats(R: *const xcb_setup_t) ->
     *mut xcb_format_t;
    pub fn xcb_setup_pixmap_formats_length(R: *const xcb_setup_t) ->
     ::libc::c_int;
    pub fn xcb_setup_pixmap_formats_iterator(R: *const xcb_setup_t) ->
     xcb_format_iterator_t;
    pub fn xcb_setup_roots_length(R: *const xcb_setup_t) -> ::libc::c_int;
    pub fn xcb_setup_roots_iterator(R: *const xcb_setup_t) ->
     xcb_screen_iterator_t;
    pub fn xcb_setup_next(i: *mut xcb_setup_iterator_t);
    pub fn xcb_setup_end(i: xcb_setup_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_client_message_data_next(i:
                                            *mut xcb_client_message_data_iterator_t);
    pub fn xcb_client_message_data_end(i: xcb_client_message_data_iterator_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_create_window_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_create_window_checked(c: *mut xcb_connection_t, depth: uint8_t,
                                     wid: xcb_window_t, parent: xcb_window_t,
                                     x: int16_t, y: int16_t, width: uint16_t,
                                     height: uint16_t, border_width: uint16_t,
                                     _class: uint16_t, visual: xcb_visualid_t,
                                     value_mask: uint32_t,
                                     value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_window(c: *mut xcb_connection_t, depth: uint8_t,
                             wid: xcb_window_t, parent: xcb_window_t,
                             x: int16_t, y: int16_t, width: uint16_t,
                             height: uint16_t, border_width: uint16_t,
                             _class: uint16_t, visual: xcb_visualid_t,
                             value_mask: uint32_t,
                             value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_window_attributes_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_window_attributes_checked(c: *mut xcb_connection_t,
                                                window: xcb_window_t,
                                                value_mask: uint32_t,
                                                value_list: *const uint32_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_window_attributes(c: *mut xcb_connection_t,
                                        window: xcb_window_t,
                                        value_mask: uint32_t,
                                        value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_window_attributes(c: *mut xcb_connection_t,
                                     window: xcb_window_t) ->
     xcb_get_window_attributes_cookie_t;
    pub fn xcb_get_window_attributes_unchecked(c: *mut xcb_connection_t,
                                               window: xcb_window_t) ->
     xcb_get_window_attributes_cookie_t;
    pub fn xcb_get_window_attributes_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_get_window_attributes_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_get_window_attributes_reply_t;
    pub fn xcb_destroy_window_checked(c: *mut xcb_connection_t,
                                      window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_destroy_window(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_destroy_subwindows_checked(c: *mut xcb_connection_t,
                                          window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_destroy_subwindows(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_change_save_set_checked(c: *mut xcb_connection_t,
                                       mode: uint8_t, window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_save_set(c: *mut xcb_connection_t, mode: uint8_t,
                               window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_reparent_window_checked(c: *mut xcb_connection_t,
                                       window: xcb_window_t,
                                       parent: xcb_window_t, x: int16_t,
                                       y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_reparent_window(c: *mut xcb_connection_t, window: xcb_window_t,
                               parent: xcb_window_t, x: int16_t, y: int16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_map_window_checked(c: *mut xcb_connection_t,
                                  window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_map_window(c: *mut xcb_connection_t, window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_map_subwindows_checked(c: *mut xcb_connection_t,
                                      window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_map_subwindows(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_void_cookie_t;
    pub fn xcb_unmap_window_checked(c: *mut xcb_connection_t,
                                    window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_unmap_window(c: *mut xcb_connection_t, window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_unmap_subwindows_checked(c: *mut xcb_connection_t,
                                        window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_unmap_subwindows(c: *mut xcb_connection_t,
                                window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_configure_window_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_configure_window_checked(c: *mut xcb_connection_t,
                                        window: xcb_window_t,
                                        value_mask: uint16_t,
                                        value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_configure_window(c: *mut xcb_connection_t,
                                window: xcb_window_t, value_mask: uint16_t,
                                value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_circulate_window_checked(c: *mut xcb_connection_t,
                                        direction: uint8_t,
                                        window: xcb_window_t) ->
     xcb_void_cookie_t;
    pub fn xcb_circulate_window(c: *mut xcb_connection_t, direction: uint8_t,
                                window: xcb_window_t) -> xcb_void_cookie_t;
    pub fn xcb_get_geometry(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t) ->
     xcb_get_geometry_cookie_t;
    pub fn xcb_get_geometry_unchecked(c: *mut xcb_connection_t,
                                      drawable: xcb_drawable_t) ->
     xcb_get_geometry_cookie_t;
    pub fn xcb_get_geometry_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_get_geometry_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_geometry_reply_t;
    pub fn xcb_query_tree_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_query_tree(c: *mut xcb_connection_t, window: xcb_window_t) ->
     xcb_query_tree_cookie_t;
    pub fn xcb_query_tree_unchecked(c: *mut xcb_connection_t,
                                    window: xcb_window_t) ->
     xcb_query_tree_cookie_t;
    pub fn xcb_query_tree_children(R: *const xcb_query_tree_reply_t) ->
     *mut xcb_window_t;
    pub fn xcb_query_tree_children_length(R: *const xcb_query_tree_reply_t) ->
     ::libc::c_int;
    pub fn xcb_query_tree_children_end(R: *const xcb_query_tree_reply_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_query_tree_reply(c: *mut xcb_connection_t,
                                cookie: xcb_query_tree_cookie_t,
                                e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_tree_reply_t;
    pub fn xcb_intern_atom_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_intern_atom(c: *mut xcb_connection_t, only_if_exists: uint8_t,
                           name_len: uint16_t, name: *const ::libc::c_char) ->
     xcb_intern_atom_cookie_t;
    pub fn xcb_intern_atom_unchecked(c: *mut xcb_connection_t,
                                     only_if_exists: uint8_t,
                                     name_len: uint16_t,
                                     name: *const ::libc::c_char) ->
     xcb_intern_atom_cookie_t;
    pub fn xcb_intern_atom_reply(c: *mut xcb_connection_t,
                                 cookie: xcb_intern_atom_cookie_t,
                                 e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_intern_atom_reply_t;
    pub fn xcb_get_atom_name_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_atom_name(c: *mut xcb_connection_t, atom: xcb_atom_t) ->
     xcb_get_atom_name_cookie_t;
    pub fn xcb_get_atom_name_unchecked(c: *mut xcb_connection_t,
                                       atom: xcb_atom_t) ->
     xcb_get_atom_name_cookie_t;
    pub fn xcb_get_atom_name_name(R: *const xcb_get_atom_name_reply_t) ->
     *mut ::libc::c_char;
    pub fn xcb_get_atom_name_name_length(R: *const xcb_get_atom_name_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_atom_name_name_end(R: *const xcb_get_atom_name_reply_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_get_atom_name_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_get_atom_name_cookie_t,
                                   e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_atom_name_reply_t;
    pub fn xcb_change_property_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_change_property_checked(c: *mut xcb_connection_t,
                                       mode: uint8_t, window: xcb_window_t,
                                       property: xcb_atom_t,
                                       _type: xcb_atom_t, format: uint8_t,
                                       data_len: uint32_t,
                                       data: *const ::libc::c_void) ->
     xcb_void_cookie_t;
    pub fn xcb_change_property(c: *mut xcb_connection_t, mode: uint8_t,
                               window: xcb_window_t, property: xcb_atom_t,
                               _type: xcb_atom_t, format: uint8_t,
                               data_len: uint32_t,
                               data: *const ::libc::c_void) ->
     xcb_void_cookie_t;
    pub fn xcb_delete_property_checked(c: *mut xcb_connection_t,
                                       window: xcb_window_t,
                                       property: xcb_atom_t) ->
     xcb_void_cookie_t;
    pub fn xcb_delete_property(c: *mut xcb_connection_t, window: xcb_window_t,
                               property: xcb_atom_t) -> xcb_void_cookie_t;
    pub fn xcb_get_property_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_property(c: *mut xcb_connection_t, _delete: uint8_t,
                            window: xcb_window_t, property: xcb_atom_t,
                            _type: xcb_atom_t, long_offset: uint32_t,
                            long_length: uint32_t) ->
     xcb_get_property_cookie_t;
    pub fn xcb_get_property_unchecked(c: *mut xcb_connection_t,
                                      _delete: uint8_t, window: xcb_window_t,
                                      property: xcb_atom_t, _type: xcb_atom_t,
                                      long_offset: uint32_t,
                                      long_length: uint32_t) ->
     xcb_get_property_cookie_t;
    pub fn xcb_get_property_value(R: *const xcb_get_property_reply_t) ->
     *mut ::libc::c_void;
    pub fn xcb_get_property_value_length(R: *const xcb_get_property_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_property_value_end(R: *const xcb_get_property_reply_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_get_property_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_get_property_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_property_reply_t;
    pub fn xcb_list_properties_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_list_properties(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_list_properties_cookie_t;
    pub fn xcb_list_properties_unchecked(c: *mut xcb_connection_t,
                                         window: xcb_window_t) ->
     xcb_list_properties_cookie_t;
    pub fn xcb_list_properties_atoms(R: *const xcb_list_properties_reply_t) ->
     *mut xcb_atom_t;
    pub fn xcb_list_properties_atoms_length(R:
                                                *const xcb_list_properties_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_properties_atoms_end(R:
                                             *const xcb_list_properties_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_properties_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_list_properties_cookie_t,
                                     e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_list_properties_reply_t;
    pub fn xcb_set_selection_owner_checked(c: *mut xcb_connection_t,
                                           owner: xcb_window_t,
                                           selection: xcb_atom_t,
                                           time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_selection_owner(c: *mut xcb_connection_t,
                                   owner: xcb_window_t, selection: xcb_atom_t,
                                   time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_selection_owner(c: *mut xcb_connection_t,
                                   selection: xcb_atom_t) ->
     xcb_get_selection_owner_cookie_t;
    pub fn xcb_get_selection_owner_unchecked(c: *mut xcb_connection_t,
                                             selection: xcb_atom_t) ->
     xcb_get_selection_owner_cookie_t;
    pub fn xcb_get_selection_owner_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_selection_owner_cookie_t,
                                         e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_selection_owner_reply_t;
    pub fn xcb_convert_selection_checked(c: *mut xcb_connection_t,
                                         requestor: xcb_window_t,
                                         selection: xcb_atom_t,
                                         target: xcb_atom_t,
                                         property: xcb_atom_t,
                                         time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_convert_selection(c: *mut xcb_connection_t,
                                 requestor: xcb_window_t,
                                 selection: xcb_atom_t, target: xcb_atom_t,
                                 property: xcb_atom_t, time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_send_event_checked(c: *mut xcb_connection_t,
                                  propagate: uint8_t,
                                  destination: xcb_window_t,
                                  event_mask: uint32_t,
                                  event: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_send_event(c: *mut xcb_connection_t, propagate: uint8_t,
                          destination: xcb_window_t, event_mask: uint32_t,
                          event: *const ::libc::c_char) -> xcb_void_cookie_t;
    pub fn xcb_grab_pointer(c: *mut xcb_connection_t, owner_events: uint8_t,
                            grab_window: xcb_window_t, event_mask: uint16_t,
                            pointer_mode: uint8_t, keyboard_mode: uint8_t,
                            confine_to: xcb_window_t, cursor: xcb_cursor_t,
                            time: xcb_timestamp_t) ->
     xcb_grab_pointer_cookie_t;
    pub fn xcb_grab_pointer_unchecked(c: *mut xcb_connection_t,
                                      owner_events: uint8_t,
                                      grab_window: xcb_window_t,
                                      event_mask: uint16_t,
                                      pointer_mode: uint8_t,
                                      keyboard_mode: uint8_t,
                                      confine_to: xcb_window_t,
                                      cursor: xcb_cursor_t,
                                      time: xcb_timestamp_t) ->
     xcb_grab_pointer_cookie_t;
    pub fn xcb_grab_pointer_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_grab_pointer_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_grab_pointer_reply_t;
    pub fn xcb_ungrab_pointer_checked(c: *mut xcb_connection_t,
                                      time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_ungrab_pointer(c: *mut xcb_connection_t, time: xcb_timestamp_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_button_checked(c: *mut xcb_connection_t,
                                   owner_events: uint8_t,
                                   grab_window: xcb_window_t,
                                   event_mask: uint16_t,
                                   pointer_mode: uint8_t,
                                   keyboard_mode: uint8_t,
                                   confine_to: xcb_window_t,
                                   cursor: xcb_cursor_t, button: uint8_t,
                                   modifiers: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_button(c: *mut xcb_connection_t, owner_events: uint8_t,
                           grab_window: xcb_window_t, event_mask: uint16_t,
                           pointer_mode: uint8_t, keyboard_mode: uint8_t,
                           confine_to: xcb_window_t, cursor: xcb_cursor_t,
                           button: uint8_t, modifiers: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_ungrab_button_checked(c: *mut xcb_connection_t,
                                     button: uint8_t,
                                     grab_window: xcb_window_t,
                                     modifiers: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_ungrab_button(c: *mut xcb_connection_t, button: uint8_t,
                             grab_window: xcb_window_t, modifiers: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_active_pointer_grab_checked(c: *mut xcb_connection_t,
                                                  cursor: xcb_cursor_t,
                                                  time: xcb_timestamp_t,
                                                  event_mask: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_active_pointer_grab(c: *mut xcb_connection_t,
                                          cursor: xcb_cursor_t,
                                          time: xcb_timestamp_t,
                                          event_mask: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_grab_keyboard(c: *mut xcb_connection_t, owner_events: uint8_t,
                             grab_window: xcb_window_t, time: xcb_timestamp_t,
                             pointer_mode: uint8_t, keyboard_mode: uint8_t) ->
     xcb_grab_keyboard_cookie_t;
    pub fn xcb_grab_keyboard_unchecked(c: *mut xcb_connection_t,
                                       owner_events: uint8_t,
                                       grab_window: xcb_window_t,
                                       time: xcb_timestamp_t,
                                       pointer_mode: uint8_t,
                                       keyboard_mode: uint8_t) ->
     xcb_grab_keyboard_cookie_t;
    pub fn xcb_grab_keyboard_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_grab_keyboard_cookie_t,
                                   e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_grab_keyboard_reply_t;
    pub fn xcb_ungrab_keyboard_checked(c: *mut xcb_connection_t,
                                       time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_ungrab_keyboard(c: *mut xcb_connection_t,
                               time: xcb_timestamp_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_key_checked(c: *mut xcb_connection_t,
                                owner_events: uint8_t,
                                grab_window: xcb_window_t,
                                modifiers: uint16_t, key: xcb_keycode_t,
                                pointer_mode: uint8_t, keyboard_mode: uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_grab_key(c: *mut xcb_connection_t, owner_events: uint8_t,
                        grab_window: xcb_window_t, modifiers: uint16_t,
                        key: xcb_keycode_t, pointer_mode: uint8_t,
                        keyboard_mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_key_checked(c: *mut xcb_connection_t,
                                  key: xcb_keycode_t,
                                  grab_window: xcb_window_t,
                                  modifiers: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_key(c: *mut xcb_connection_t, key: xcb_keycode_t,
                          grab_window: xcb_window_t, modifiers: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_allow_events_checked(c: *mut xcb_connection_t, mode: uint8_t,
                                    time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_allow_events(c: *mut xcb_connection_t, mode: uint8_t,
                            time: xcb_timestamp_t) -> xcb_void_cookie_t;
    pub fn xcb_grab_server_checked(c: *mut xcb_connection_t) ->
     xcb_void_cookie_t;
    pub fn xcb_grab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_ungrab_server_checked(c: *mut xcb_connection_t) ->
     xcb_void_cookie_t;
    pub fn xcb_ungrab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_query_pointer(c: *mut xcb_connection_t, window: xcb_window_t)
     -> xcb_query_pointer_cookie_t;
    pub fn xcb_query_pointer_unchecked(c: *mut xcb_connection_t,
                                       window: xcb_window_t) ->
     xcb_query_pointer_cookie_t;
    pub fn xcb_query_pointer_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_query_pointer_cookie_t,
                                   e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_pointer_reply_t;
    pub fn xcb_timecoord_next(i: *mut xcb_timecoord_iterator_t);
    pub fn xcb_timecoord_end(i: xcb_timecoord_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_get_motion_events_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_motion_events(c: *mut xcb_connection_t,
                                 window: xcb_window_t, start: xcb_timestamp_t,
                                 stop: xcb_timestamp_t) ->
     xcb_get_motion_events_cookie_t;
    pub fn xcb_get_motion_events_unchecked(c: *mut xcb_connection_t,
                                           window: xcb_window_t,
                                           start: xcb_timestamp_t,
                                           stop: xcb_timestamp_t) ->
     xcb_get_motion_events_cookie_t;
    pub fn xcb_get_motion_events_events(R:
                                            *const xcb_get_motion_events_reply_t)
     -> *mut xcb_timecoord_t;
    pub fn xcb_get_motion_events_events_length(R:
                                                   *const xcb_get_motion_events_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_motion_events_events_iterator(R:
                                                     *const xcb_get_motion_events_reply_t)
     -> xcb_timecoord_iterator_t;
    pub fn xcb_get_motion_events_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_get_motion_events_cookie_t,
                                       e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_motion_events_reply_t;
    pub fn xcb_translate_coordinates(c: *mut xcb_connection_t,
                                     src_window: xcb_window_t,
                                     dst_window: xcb_window_t, src_x: int16_t,
                                     src_y: int16_t) ->
     xcb_translate_coordinates_cookie_t;
    pub fn xcb_translate_coordinates_unchecked(c: *mut xcb_connection_t,
                                               src_window: xcb_window_t,
                                               dst_window: xcb_window_t,
                                               src_x: int16_t, src_y: int16_t)
     -> xcb_translate_coordinates_cookie_t;
    pub fn xcb_translate_coordinates_reply(c: *mut xcb_connection_t,
                                           cookie:
                                               xcb_translate_coordinates_cookie_t,
                                           e: *mut *mut xcb_generic_error_t)
     -> *mut xcb_translate_coordinates_reply_t;
    pub fn xcb_warp_pointer_checked(c: *mut xcb_connection_t,
                                    src_window: xcb_window_t,
                                    dst_window: xcb_window_t, src_x: int16_t,
                                    src_y: int16_t, src_width: uint16_t,
                                    src_height: uint16_t, dst_x: int16_t,
                                    dst_y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_warp_pointer(c: *mut xcb_connection_t,
                            src_window: xcb_window_t,
                            dst_window: xcb_window_t, src_x: int16_t,
                            src_y: int16_t, src_width: uint16_t,
                            src_height: uint16_t, dst_x: int16_t,
                            dst_y: int16_t) -> xcb_void_cookie_t;
    pub fn xcb_set_input_focus_checked(c: *mut xcb_connection_t,
                                       revert_to: uint8_t,
                                       focus: xcb_window_t,
                                       time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_input_focus(c: *mut xcb_connection_t, revert_to: uint8_t,
                               focus: xcb_window_t, time: xcb_timestamp_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_input_focus(c: *mut xcb_connection_t) ->
     xcb_get_input_focus_cookie_t;
    pub fn xcb_get_input_focus_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_input_focus_cookie_t;
    pub fn xcb_get_input_focus_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_get_input_focus_cookie_t,
                                     e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_input_focus_reply_t;
    pub fn xcb_query_keymap(c: *mut xcb_connection_t) ->
     xcb_query_keymap_cookie_t;
    pub fn xcb_query_keymap_unchecked(c: *mut xcb_connection_t) ->
     xcb_query_keymap_cookie_t;
    pub fn xcb_query_keymap_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_query_keymap_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_keymap_reply_t;
    pub fn xcb_open_font_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_open_font_checked(c: *mut xcb_connection_t, fid: xcb_font_t,
                                 name_len: uint16_t,
                                 name: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_open_font(c: *mut xcb_connection_t, fid: xcb_font_t,
                         name_len: uint16_t, name: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_close_font_checked(c: *mut xcb_connection_t, font: xcb_font_t)
     -> xcb_void_cookie_t;
    pub fn xcb_close_font(c: *mut xcb_connection_t, font: xcb_font_t) ->
     xcb_void_cookie_t;
    pub fn xcb_fontprop_next(i: *mut xcb_fontprop_iterator_t);
    pub fn xcb_fontprop_end(i: xcb_fontprop_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_charinfo_next(i: *mut xcb_charinfo_iterator_t);
    pub fn xcb_charinfo_end(i: xcb_charinfo_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_query_font_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_query_font(c: *mut xcb_connection_t, font: xcb_fontable_t) ->
     xcb_query_font_cookie_t;
    pub fn xcb_query_font_unchecked(c: *mut xcb_connection_t,
                                    font: xcb_fontable_t) ->
     xcb_query_font_cookie_t;
    pub fn xcb_query_font_properties(R: *const xcb_query_font_reply_t) ->
     *mut xcb_fontprop_t;
    pub fn xcb_query_font_properties_length(R: *const xcb_query_font_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_font_properties_iterator(R:
                                                  *const xcb_query_font_reply_t)
     -> xcb_fontprop_iterator_t;
    pub fn xcb_query_font_char_infos(R: *const xcb_query_font_reply_t) ->
     *mut xcb_charinfo_t;
    pub fn xcb_query_font_char_infos_length(R: *const xcb_query_font_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_font_char_infos_iterator(R:
                                                  *const xcb_query_font_reply_t)
     -> xcb_charinfo_iterator_t;
    pub fn xcb_query_font_reply(c: *mut xcb_connection_t,
                                cookie: xcb_query_font_cookie_t,
                                e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_font_reply_t;
    pub fn xcb_query_text_extents_sizeof(_buffer: *const ::libc::c_void,
                                         string_len: uint32_t) ->
     ::libc::c_int;
    pub fn xcb_query_text_extents(c: *mut xcb_connection_t,
                                  font: xcb_fontable_t, string_len: uint32_t,
                                  string: *const xcb_char2b_t) ->
     xcb_query_text_extents_cookie_t;
    pub fn xcb_query_text_extents_unchecked(c: *mut xcb_connection_t,
                                            font: xcb_fontable_t,
                                            string_len: uint32_t,
                                            string: *const xcb_char2b_t) ->
     xcb_query_text_extents_cookie_t;
    pub fn xcb_query_text_extents_reply(c: *mut xcb_connection_t,
                                        cookie:
                                            xcb_query_text_extents_cookie_t,
                                        e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_text_extents_reply_t;
    pub fn xcb_str_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_str_name(R: *const xcb_str_t) -> *mut ::libc::c_char;
    pub fn xcb_str_name_length(R: *const xcb_str_t) -> ::libc::c_int;
    pub fn xcb_str_name_end(R: *const xcb_str_t) -> xcb_generic_iterator_t;
    pub fn xcb_str_next(i: *mut xcb_str_iterator_t);
    pub fn xcb_str_end(i: xcb_str_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_list_fonts_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_list_fonts(c: *mut xcb_connection_t, max_names: uint16_t,
                          pattern_len: uint16_t,
                          pattern: *const ::libc::c_char) ->
     xcb_list_fonts_cookie_t;
    pub fn xcb_list_fonts_unchecked(c: *mut xcb_connection_t,
                                    max_names: uint16_t,
                                    pattern_len: uint16_t,
                                    pattern: *const ::libc::c_char) ->
     xcb_list_fonts_cookie_t;
    pub fn xcb_list_fonts_names_length(R: *const xcb_list_fonts_reply_t) ->
     ::libc::c_int;
    pub fn xcb_list_fonts_names_iterator(R: *const xcb_list_fonts_reply_t) ->
     xcb_str_iterator_t;
    pub fn xcb_list_fonts_reply(c: *mut xcb_connection_t,
                                cookie: xcb_list_fonts_cookie_t,
                                e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_list_fonts_reply_t;
    pub fn xcb_list_fonts_with_info_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_list_fonts_with_info(c: *mut xcb_connection_t,
                                    max_names: uint16_t,
                                    pattern_len: uint16_t,
                                    pattern: *const ::libc::c_char) ->
     xcb_list_fonts_with_info_cookie_t;
    pub fn xcb_list_fonts_with_info_unchecked(c: *mut xcb_connection_t,
                                              max_names: uint16_t,
                                              pattern_len: uint16_t,
                                              pattern: *const ::libc::c_char)
     -> xcb_list_fonts_with_info_cookie_t;
    pub fn xcb_list_fonts_with_info_properties(R:
                                                   *const xcb_list_fonts_with_info_reply_t)
     -> *mut xcb_fontprop_t;
    pub fn xcb_list_fonts_with_info_properties_length(R:
                                                          *const xcb_list_fonts_with_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_with_info_properties_iterator(R:
                                                            *const xcb_list_fonts_with_info_reply_t)
     -> xcb_fontprop_iterator_t;
    pub fn xcb_list_fonts_with_info_name(R:
                                             *const xcb_list_fonts_with_info_reply_t)
     -> *mut ::libc::c_char;
    pub fn xcb_list_fonts_with_info_name_length(R:
                                                    *const xcb_list_fonts_with_info_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_fonts_with_info_name_end(R:
                                                 *const xcb_list_fonts_with_info_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_fonts_with_info_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_list_fonts_with_info_cookie_t,
                                          e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_list_fonts_with_info_reply_t;
    pub fn xcb_set_font_path_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_set_font_path_checked(c: *mut xcb_connection_t,
                                     font_qty: uint16_t,
                                     font: *const xcb_str_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_font_path(c: *mut xcb_connection_t, font_qty: uint16_t,
                             font: *const xcb_str_t) -> xcb_void_cookie_t;
    pub fn xcb_get_font_path_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_font_path(c: *mut xcb_connection_t) ->
     xcb_get_font_path_cookie_t;
    pub fn xcb_get_font_path_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_font_path_cookie_t;
    pub fn xcb_get_font_path_path_length(R: *const xcb_get_font_path_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_font_path_path_iterator(R:
                                               *const xcb_get_font_path_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_get_font_path_reply(c: *mut xcb_connection_t,
                                   cookie: xcb_get_font_path_cookie_t,
                                   e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_font_path_reply_t;
    pub fn xcb_create_pixmap_checked(c: *mut xcb_connection_t, depth: uint8_t,
                                     pid: xcb_pixmap_t,
                                     drawable: xcb_drawable_t,
                                     width: uint16_t, height: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_pixmap(c: *mut xcb_connection_t, depth: uint8_t,
                             pid: xcb_pixmap_t, drawable: xcb_drawable_t,
                             width: uint16_t, height: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_free_pixmap_checked(c: *mut xcb_connection_t,
                                   pixmap: xcb_pixmap_t) -> xcb_void_cookie_t;
    pub fn xcb_free_pixmap(c: *mut xcb_connection_t, pixmap: xcb_pixmap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_gc_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_create_gc_checked(c: *mut xcb_connection_t,
                                 cid: xcb_gcontext_t,
                                 drawable: xcb_drawable_t,
                                 value_mask: uint32_t,
                                 value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_gc(c: *mut xcb_connection_t, cid: xcb_gcontext_t,
                         drawable: xcb_drawable_t, value_mask: uint32_t,
                         value_list: *const uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_change_gc_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_change_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                                 value_mask: uint32_t,
                                 value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                         value_mask: uint32_t, value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_copy_gc_checked(c: *mut xcb_connection_t,
                               src_gc: xcb_gcontext_t, dst_gc: xcb_gcontext_t,
                               value_mask: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_copy_gc(c: *mut xcb_connection_t, src_gc: xcb_gcontext_t,
                       dst_gc: xcb_gcontext_t, value_mask: uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_dashes_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_set_dashes_checked(c: *mut xcb_connection_t,
                                  gc: xcb_gcontext_t, dash_offset: uint16_t,
                                  dashes_len: uint16_t,
                                  dashes: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_dashes(c: *mut xcb_connection_t, gc: xcb_gcontext_t,
                          dash_offset: uint16_t, dashes_len: uint16_t,
                          dashes: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_set_clip_rectangles_sizeof(_buffer: *const ::libc::c_void,
                                          rectangles_len: uint32_t) ->
     ::libc::c_int;
    pub fn xcb_set_clip_rectangles_checked(c: *mut xcb_connection_t,
                                           ordering: uint8_t,
                                           gc: xcb_gcontext_t,
                                           clip_x_origin: int16_t,
                                           clip_y_origin: int16_t,
                                           rectangles_len: uint32_t,
                                           rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_set_clip_rectangles(c: *mut xcb_connection_t,
                                   ordering: uint8_t, gc: xcb_gcontext_t,
                                   clip_x_origin: int16_t,
                                   clip_y_origin: int16_t,
                                   rectangles_len: uint32_t,
                                   rectangles: *const xcb_rectangle_t) ->
     xcb_void_cookie_t;
    pub fn xcb_free_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t) ->
     xcb_void_cookie_t;
    pub fn xcb_clear_area_checked(c: *mut xcb_connection_t,
                                  exposures: uint8_t, window: xcb_window_t,
                                  x: int16_t, y: int16_t, width: uint16_t,
                                  height: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_clear_area(c: *mut xcb_connection_t, exposures: uint8_t,
                          window: xcb_window_t, x: int16_t, y: int16_t,
                          width: uint16_t, height: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_copy_area_checked(c: *mut xcb_connection_t,
                                 src_drawable: xcb_drawable_t,
                                 dst_drawable: xcb_drawable_t,
                                 gc: xcb_gcontext_t, src_x: int16_t,
                                 src_y: int16_t, dst_x: int16_t,
                                 dst_y: int16_t, width: uint16_t,
                                 height: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_copy_area(c: *mut xcb_connection_t,
                         src_drawable: xcb_drawable_t,
                         dst_drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         src_x: int16_t, src_y: int16_t, dst_x: int16_t,
                         dst_y: int16_t, width: uint16_t, height: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_copy_plane_checked(c: *mut xcb_connection_t,
                                  src_drawable: xcb_drawable_t,
                                  dst_drawable: xcb_drawable_t,
                                  gc: xcb_gcontext_t, src_x: int16_t,
                                  src_y: int16_t, dst_x: int16_t,
                                  dst_y: int16_t, width: uint16_t,
                                  height: uint16_t, bit_plane: uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_copy_plane(c: *mut xcb_connection_t,
                          src_drawable: xcb_drawable_t,
                          dst_drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                          src_x: int16_t, src_y: int16_t, dst_x: int16_t,
                          dst_y: int16_t, width: uint16_t, height: uint16_t,
                          bit_plane: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_poly_point_sizeof(_buffer: *const ::libc::c_void,
                                 points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_point_checked(c: *mut xcb_connection_t,
                                  coordinate_mode: uint8_t,
                                  drawable: xcb_drawable_t,
                                  gc: xcb_gcontext_t, points_len: uint32_t,
                                  points: *const xcb_point_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_point(c: *mut xcb_connection_t, coordinate_mode: uint8_t,
                          drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                          points_len: uint32_t, points: *const xcb_point_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_line_sizeof(_buffer: *const ::libc::c_void,
                                points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_line_checked(c: *mut xcb_connection_t,
                                 coordinate_mode: uint8_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 points_len: uint32_t,
                                 points: *const xcb_point_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_line(c: *mut xcb_connection_t, coordinate_mode: uint8_t,
                         drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         points_len: uint32_t, points: *const xcb_point_t) ->
     xcb_void_cookie_t;
    pub fn xcb_segment_next(i: *mut xcb_segment_iterator_t);
    pub fn xcb_segment_end(i: xcb_segment_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_poly_segment_sizeof(_buffer: *const ::libc::c_void,
                                   segments_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_segment_checked(c: *mut xcb_connection_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t,
                                    segments_len: uint32_t,
                                    segments: *const xcb_segment_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_segment(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            segments_len: uint32_t,
                            segments: *const xcb_segment_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_rectangle_sizeof(_buffer: *const ::libc::c_void,
                                     rectangles_len: uint32_t) ->
     ::libc::c_int;
    pub fn xcb_poly_rectangle_checked(c: *mut xcb_connection_t,
                                      drawable: xcb_drawable_t,
                                      gc: xcb_gcontext_t,
                                      rectangles_len: uint32_t,
                                      rectangles: *const xcb_rectangle_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_rectangle(c: *mut xcb_connection_t,
                              drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                              rectangles_len: uint32_t,
                              rectangles: *const xcb_rectangle_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_arc_sizeof(_buffer: *const ::libc::c_void,
                               arcs_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_arc_checked(c: *mut xcb_connection_t,
                                drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                arcs_len: uint32_t, arcs: *const xcb_arc_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_arc(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                        gc: xcb_gcontext_t, arcs_len: uint32_t,
                        arcs: *const xcb_arc_t) -> xcb_void_cookie_t;
    pub fn xcb_fill_poly_sizeof(_buffer: *const ::libc::c_void,
                                points_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_fill_poly_checked(c: *mut xcb_connection_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 shape: uint8_t, coordinate_mode: uint8_t,
                                 points_len: uint32_t,
                                 points: *const xcb_point_t) ->
     xcb_void_cookie_t;
    pub fn xcb_fill_poly(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                         gc: xcb_gcontext_t, shape: uint8_t,
                         coordinate_mode: uint8_t, points_len: uint32_t,
                         points: *const xcb_point_t) -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_rectangle_sizeof(_buffer: *const ::libc::c_void,
                                          rectangles_len: uint32_t) ->
     ::libc::c_int;
    pub fn xcb_poly_fill_rectangle_checked(c: *mut xcb_connection_t,
                                           drawable: xcb_drawable_t,
                                           gc: xcb_gcontext_t,
                                           rectangles_len: uint32_t,
                                           rectangles: *const xcb_rectangle_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_fill_rectangle(c: *mut xcb_connection_t,
                                   drawable: xcb_drawable_t,
                                   gc: xcb_gcontext_t,
                                   rectangles_len: uint32_t,
                                   rectangles: *const xcb_rectangle_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_fill_arc_sizeof(_buffer: *const ::libc::c_void,
                                    arcs_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_fill_arc_checked(c: *mut xcb_connection_t,
                                     drawable: xcb_drawable_t,
                                     gc: xcb_gcontext_t, arcs_len: uint32_t,
                                     arcs: *const xcb_arc_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_fill_arc(c: *mut xcb_connection_t,
                             drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                             arcs_len: uint32_t, arcs: *const xcb_arc_t) ->
     xcb_void_cookie_t;
    pub fn xcb_put_image_sizeof(_buffer: *const ::libc::c_void,
                                data_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_put_image_checked(c: *mut xcb_connection_t, format: uint8_t,
                                 drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                                 width: uint16_t, height: uint16_t,
                                 dst_x: int16_t, dst_y: int16_t,
                                 left_pad: uint8_t, depth: uint8_t,
                                 data_len: uint32_t, data: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_put_image(c: *mut xcb_connection_t, format: uint8_t,
                         drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                         width: uint16_t, height: uint16_t, dst_x: int16_t,
                         dst_y: int16_t, left_pad: uint8_t, depth: uint8_t,
                         data_len: uint32_t, data: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_image_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_image(c: *mut xcb_connection_t, format: uint8_t,
                         drawable: xcb_drawable_t, x: int16_t, y: int16_t,
                         width: uint16_t, height: uint16_t,
                         plane_mask: uint32_t) -> xcb_get_image_cookie_t;
    pub fn xcb_get_image_unchecked(c: *mut xcb_connection_t, format: uint8_t,
                                   drawable: xcb_drawable_t, x: int16_t,
                                   y: int16_t, width: uint16_t,
                                   height: uint16_t, plane_mask: uint32_t) ->
     xcb_get_image_cookie_t;
    pub fn xcb_get_image_data(R: *const xcb_get_image_reply_t) ->
     *mut uint8_t;
    pub fn xcb_get_image_data_length(R: *const xcb_get_image_reply_t) ->
     ::libc::c_int;
    pub fn xcb_get_image_data_end(R: *const xcb_get_image_reply_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_get_image_reply(c: *mut xcb_connection_t,
                               cookie: xcb_get_image_cookie_t,
                               e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_image_reply_t;
    pub fn xcb_poly_text_8_sizeof(_buffer: *const ::libc::c_void,
                                  items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_text_8_checked(c: *mut xcb_connection_t,
                                   drawable: xcb_drawable_t,
                                   gc: xcb_gcontext_t, x: int16_t, y: int16_t,
                                   items_len: uint32_t, items: *const uint8_t)
     -> xcb_void_cookie_t;
    pub fn xcb_poly_text_8(c: *mut xcb_connection_t, drawable: xcb_drawable_t,
                           gc: xcb_gcontext_t, x: int16_t, y: int16_t,
                           items_len: uint32_t, items: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_text_16_sizeof(_buffer: *const ::libc::c_void,
                                   items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_poly_text_16_checked(c: *mut xcb_connection_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t, x: int16_t,
                                    y: int16_t, items_len: uint32_t,
                                    items: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_poly_text_16(c: *mut xcb_connection_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            x: int16_t, y: int16_t, items_len: uint32_t,
                            items: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_image_text_8_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_image_text_8_checked(c: *mut xcb_connection_t,
                                    string_len: uint8_t,
                                    drawable: xcb_drawable_t,
                                    gc: xcb_gcontext_t, x: int16_t,
                                    y: int16_t, string: *const ::libc::c_char)
     -> xcb_void_cookie_t;
    pub fn xcb_image_text_8(c: *mut xcb_connection_t, string_len: uint8_t,
                            drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                            x: int16_t, y: int16_t,
                            string: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_image_text_16_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_image_text_16_checked(c: *mut xcb_connection_t,
                                     string_len: uint8_t,
                                     drawable: xcb_drawable_t,
                                     gc: xcb_gcontext_t, x: int16_t,
                                     y: int16_t, string: *const xcb_char2b_t)
     -> xcb_void_cookie_t;
    pub fn xcb_image_text_16(c: *mut xcb_connection_t, string_len: uint8_t,
                             drawable: xcb_drawable_t, gc: xcb_gcontext_t,
                             x: int16_t, y: int16_t,
                             string: *const xcb_char2b_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_colormap_checked(c: *mut xcb_connection_t,
                                       alloc: uint8_t, mid: xcb_colormap_t,
                                       window: xcb_window_t,
                                       visual: xcb_visualid_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_colormap(c: *mut xcb_connection_t, alloc: uint8_t,
                               mid: xcb_colormap_t, window: xcb_window_t,
                               visual: xcb_visualid_t) -> xcb_void_cookie_t;
    pub fn xcb_free_colormap_checked(c: *mut xcb_connection_t,
                                     cmap: xcb_colormap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_free_colormap(c: *mut xcb_connection_t, cmap: xcb_colormap_t)
     -> xcb_void_cookie_t;
    pub fn xcb_copy_colormap_and_free_checked(c: *mut xcb_connection_t,
                                              mid: xcb_colormap_t,
                                              src_cmap: xcb_colormap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_copy_colormap_and_free(c: *mut xcb_connection_t,
                                      mid: xcb_colormap_t,
                                      src_cmap: xcb_colormap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_install_colormap_checked(c: *mut xcb_connection_t,
                                        cmap: xcb_colormap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_install_colormap(c: *mut xcb_connection_t,
                                cmap: xcb_colormap_t) -> xcb_void_cookie_t;
    pub fn xcb_uninstall_colormap_checked(c: *mut xcb_connection_t,
                                          cmap: xcb_colormap_t) ->
     xcb_void_cookie_t;
    pub fn xcb_uninstall_colormap(c: *mut xcb_connection_t,
                                  cmap: xcb_colormap_t) -> xcb_void_cookie_t;
    pub fn xcb_list_installed_colormaps_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_list_installed_colormaps(c: *mut xcb_connection_t,
                                        window: xcb_window_t) ->
     xcb_list_installed_colormaps_cookie_t;
    pub fn xcb_list_installed_colormaps_unchecked(c: *mut xcb_connection_t,
                                                  window: xcb_window_t) ->
     xcb_list_installed_colormaps_cookie_t;
    pub fn xcb_list_installed_colormaps_cmaps(R:
                                                  *const xcb_list_installed_colormaps_reply_t)
     -> *mut xcb_colormap_t;
    pub fn xcb_list_installed_colormaps_cmaps_length(R:
                                                         *const xcb_list_installed_colormaps_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_installed_colormaps_cmaps_end(R:
                                                      *const xcb_list_installed_colormaps_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_list_installed_colormaps_reply(c: *mut xcb_connection_t,
                                              cookie:
                                                  xcb_list_installed_colormaps_cookie_t,
                                              e:
                                                  *mut *mut xcb_generic_error_t)
     -> *mut xcb_list_installed_colormaps_reply_t;
    pub fn xcb_alloc_color(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                           red: uint16_t, green: uint16_t, blue: uint16_t) ->
     xcb_alloc_color_cookie_t;
    pub fn xcb_alloc_color_unchecked(c: *mut xcb_connection_t,
                                     cmap: xcb_colormap_t, red: uint16_t,
                                     green: uint16_t, blue: uint16_t) ->
     xcb_alloc_color_cookie_t;
    pub fn xcb_alloc_color_reply(c: *mut xcb_connection_t,
                                 cookie: xcb_alloc_color_cookie_t,
                                 e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_alloc_color_reply_t;
    pub fn xcb_alloc_named_color_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_alloc_named_color(c: *mut xcb_connection_t,
                                 cmap: xcb_colormap_t, name_len: uint16_t,
                                 name: *const ::libc::c_char) ->
     xcb_alloc_named_color_cookie_t;
    pub fn xcb_alloc_named_color_unchecked(c: *mut xcb_connection_t,
                                           cmap: xcb_colormap_t,
                                           name_len: uint16_t,
                                           name: *const ::libc::c_char) ->
     xcb_alloc_named_color_cookie_t;
    pub fn xcb_alloc_named_color_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_alloc_named_color_cookie_t,
                                       e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_alloc_named_color_reply_t;
    pub fn xcb_alloc_color_cells_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_alloc_color_cells(c: *mut xcb_connection_t,
                                 contiguous: uint8_t, cmap: xcb_colormap_t,
                                 colors: uint16_t, planes: uint16_t) ->
     xcb_alloc_color_cells_cookie_t;
    pub fn xcb_alloc_color_cells_unchecked(c: *mut xcb_connection_t,
                                           contiguous: uint8_t,
                                           cmap: xcb_colormap_t,
                                           colors: uint16_t, planes: uint16_t)
     -> xcb_alloc_color_cells_cookie_t;
    pub fn xcb_alloc_color_cells_pixels(R:
                                            *const xcb_alloc_color_cells_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_cells_pixels_length(R:
                                                   *const xcb_alloc_color_cells_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_cells_pixels_end(R:
                                                *const xcb_alloc_color_cells_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_cells_masks(R:
                                           *const xcb_alloc_color_cells_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_cells_masks_length(R:
                                                  *const xcb_alloc_color_cells_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_cells_masks_end(R:
                                               *const xcb_alloc_color_cells_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_cells_reply(c: *mut xcb_connection_t,
                                       cookie: xcb_alloc_color_cells_cookie_t,
                                       e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_alloc_color_cells_reply_t;
    pub fn xcb_alloc_color_planes_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_alloc_color_planes(c: *mut xcb_connection_t,
                                  contiguous: uint8_t, cmap: xcb_colormap_t,
                                  colors: uint16_t, reds: uint16_t,
                                  greens: uint16_t, blues: uint16_t) ->
     xcb_alloc_color_planes_cookie_t;
    pub fn xcb_alloc_color_planes_unchecked(c: *mut xcb_connection_t,
                                            contiguous: uint8_t,
                                            cmap: xcb_colormap_t,
                                            colors: uint16_t, reds: uint16_t,
                                            greens: uint16_t, blues: uint16_t)
     -> xcb_alloc_color_planes_cookie_t;
    pub fn xcb_alloc_color_planes_pixels(R:
                                             *const xcb_alloc_color_planes_reply_t)
     -> *mut uint32_t;
    pub fn xcb_alloc_color_planes_pixels_length(R:
                                                    *const xcb_alloc_color_planes_reply_t)
     -> ::libc::c_int;
    pub fn xcb_alloc_color_planes_pixels_end(R:
                                                 *const xcb_alloc_color_planes_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_alloc_color_planes_reply(c: *mut xcb_connection_t,
                                        cookie:
                                            xcb_alloc_color_planes_cookie_t,
                                        e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_alloc_color_planes_reply_t;
    pub fn xcb_free_colors_sizeof(_buffer: *const ::libc::c_void,
                                  pixels_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_free_colors_checked(c: *mut xcb_connection_t,
                                   cmap: xcb_colormap_t, plane_mask: uint32_t,
                                   pixels_len: uint32_t,
                                   pixels: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_free_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                           plane_mask: uint32_t, pixels_len: uint32_t,
                           pixels: *const uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_coloritem_next(i: *mut xcb_coloritem_iterator_t);
    pub fn xcb_coloritem_end(i: xcb_coloritem_iterator_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_store_colors_sizeof(_buffer: *const ::libc::c_void,
                                   items_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_store_colors_checked(c: *mut xcb_connection_t,
                                    cmap: xcb_colormap_t, items_len: uint32_t,
                                    items: *const xcb_coloritem_t) ->
     xcb_void_cookie_t;
    pub fn xcb_store_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            items_len: uint32_t,
                            items: *const xcb_coloritem_t) ->
     xcb_void_cookie_t;
    pub fn xcb_store_named_color_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_store_named_color_checked(c: *mut xcb_connection_t,
                                         flags: uint8_t, cmap: xcb_colormap_t,
                                         pixel: uint32_t, name_len: uint16_t,
                                         name: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_store_named_color(c: *mut xcb_connection_t, flags: uint8_t,
                                 cmap: xcb_colormap_t, pixel: uint32_t,
                                 name_len: uint16_t,
                                 name: *const ::libc::c_char) ->
     xcb_void_cookie_t;
    pub fn xcb_rgb_next(i: *mut xcb_rgb_iterator_t);
    pub fn xcb_rgb_end(i: xcb_rgb_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_query_colors_sizeof(_buffer: *const ::libc::c_void,
                                   pixels_len: uint32_t) -> ::libc::c_int;
    pub fn xcb_query_colors(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            pixels_len: uint32_t, pixels: *const uint32_t) ->
     xcb_query_colors_cookie_t;
    pub fn xcb_query_colors_unchecked(c: *mut xcb_connection_t,
                                      cmap: xcb_colormap_t,
                                      pixels_len: uint32_t,
                                      pixels: *const uint32_t) ->
     xcb_query_colors_cookie_t;
    pub fn xcb_query_colors_colors(R: *const xcb_query_colors_reply_t) ->
     *mut xcb_rgb_t;
    pub fn xcb_query_colors_colors_length(R: *const xcb_query_colors_reply_t)
     -> ::libc::c_int;
    pub fn xcb_query_colors_colors_iterator(R:
                                                *const xcb_query_colors_reply_t)
     -> xcb_rgb_iterator_t;
    pub fn xcb_query_colors_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_query_colors_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_colors_reply_t;
    pub fn xcb_lookup_color_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_lookup_color(c: *mut xcb_connection_t, cmap: xcb_colormap_t,
                            name_len: uint16_t, name: *const ::libc::c_char)
     -> xcb_lookup_color_cookie_t;
    pub fn xcb_lookup_color_unchecked(c: *mut xcb_connection_t,
                                      cmap: xcb_colormap_t,
                                      name_len: uint16_t,
                                      name: *const ::libc::c_char) ->
     xcb_lookup_color_cookie_t;
    pub fn xcb_lookup_color_reply(c: *mut xcb_connection_t,
                                  cookie: xcb_lookup_color_cookie_t,
                                  e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_lookup_color_reply_t;
    pub fn xcb_create_cursor_checked(c: *mut xcb_connection_t,
                                     cid: xcb_cursor_t, source: xcb_pixmap_t,
                                     mask: xcb_pixmap_t, fore_red: uint16_t,
                                     fore_green: uint16_t,
                                     fore_blue: uint16_t, back_red: uint16_t,
                                     back_green: uint16_t,
                                     back_blue: uint16_t, x: uint16_t,
                                     y: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_create_cursor(c: *mut xcb_connection_t, cid: xcb_cursor_t,
                             source: xcb_pixmap_t, mask: xcb_pixmap_t,
                             fore_red: uint16_t, fore_green: uint16_t,
                             fore_blue: uint16_t, back_red: uint16_t,
                             back_green: uint16_t, back_blue: uint16_t,
                             x: uint16_t, y: uint16_t) -> xcb_void_cookie_t;
    pub fn xcb_create_glyph_cursor_checked(c: *mut xcb_connection_t,
                                           cid: xcb_cursor_t,
                                           source_font: xcb_font_t,
                                           mask_font: xcb_font_t,
                                           source_char: uint16_t,
                                           mask_char: uint16_t,
                                           fore_red: uint16_t,
                                           fore_green: uint16_t,
                                           fore_blue: uint16_t,
                                           back_red: uint16_t,
                                           back_green: uint16_t,
                                           back_blue: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_create_glyph_cursor(c: *mut xcb_connection_t,
                                   cid: xcb_cursor_t, source_font: xcb_font_t,
                                   mask_font: xcb_font_t,
                                   source_char: uint16_t, mask_char: uint16_t,
                                   fore_red: uint16_t, fore_green: uint16_t,
                                   fore_blue: uint16_t, back_red: uint16_t,
                                   back_green: uint16_t, back_blue: uint16_t)
     -> xcb_void_cookie_t;
    pub fn xcb_free_cursor_checked(c: *mut xcb_connection_t,
                                   cursor: xcb_cursor_t) -> xcb_void_cookie_t;
    pub fn xcb_free_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t) ->
     xcb_void_cookie_t;
    pub fn xcb_recolor_cursor_checked(c: *mut xcb_connection_t,
                                      cursor: xcb_cursor_t,
                                      fore_red: uint16_t,
                                      fore_green: uint16_t,
                                      fore_blue: uint16_t, back_red: uint16_t,
                                      back_green: uint16_t,
                                      back_blue: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_recolor_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t,
                              fore_red: uint16_t, fore_green: uint16_t,
                              fore_blue: uint16_t, back_red: uint16_t,
                              back_green: uint16_t, back_blue: uint16_t) ->
     xcb_void_cookie_t;
    pub fn xcb_query_best_size(c: *mut xcb_connection_t, _class: uint8_t,
                               drawable: xcb_drawable_t, width: uint16_t,
                               height: uint16_t) ->
     xcb_query_best_size_cookie_t;
    pub fn xcb_query_best_size_unchecked(c: *mut xcb_connection_t,
                                         _class: uint8_t,
                                         drawable: xcb_drawable_t,
                                         width: uint16_t, height: uint16_t) ->
     xcb_query_best_size_cookie_t;
    pub fn xcb_query_best_size_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_query_best_size_cookie_t,
                                     e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_best_size_reply_t;
    pub fn xcb_query_extension_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_query_extension(c: *mut xcb_connection_t, name_len: uint16_t,
                               name: *const ::libc::c_char) ->
     xcb_query_extension_cookie_t;
    pub fn xcb_query_extension_unchecked(c: *mut xcb_connection_t,
                                         name_len: uint16_t,
                                         name: *const ::libc::c_char) ->
     xcb_query_extension_cookie_t;
    pub fn xcb_query_extension_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_query_extension_cookie_t,
                                     e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_query_extension_reply_t;
    pub fn xcb_list_extensions_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_list_extensions(c: *mut xcb_connection_t) ->
     xcb_list_extensions_cookie_t;
    pub fn xcb_list_extensions_unchecked(c: *mut xcb_connection_t) ->
     xcb_list_extensions_cookie_t;
    pub fn xcb_list_extensions_names_length(R:
                                                *const xcb_list_extensions_reply_t)
     -> ::libc::c_int;
    pub fn xcb_list_extensions_names_iterator(R:
                                                  *const xcb_list_extensions_reply_t)
     -> xcb_str_iterator_t;
    pub fn xcb_list_extensions_reply(c: *mut xcb_connection_t,
                                     cookie: xcb_list_extensions_cookie_t,
                                     e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_list_extensions_reply_t;
    pub fn xcb_change_keyboard_mapping_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_keyboard_mapping_checked(c: *mut xcb_connection_t,
                                               keycode_count: uint8_t,
                                               first_keycode: xcb_keycode_t,
                                               keysyms_per_keycode: uint8_t,
                                               keysyms: *const xcb_keysym_t)
     -> xcb_void_cookie_t;
    pub fn xcb_change_keyboard_mapping(c: *mut xcb_connection_t,
                                       keycode_count: uint8_t,
                                       first_keycode: xcb_keycode_t,
                                       keysyms_per_keycode: uint8_t,
                                       keysyms: *const xcb_keysym_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_keyboard_mapping_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_keyboard_mapping(c: *mut xcb_connection_t,
                                    first_keycode: xcb_keycode_t,
                                    count: uint8_t) ->
     xcb_get_keyboard_mapping_cookie_t;
    pub fn xcb_get_keyboard_mapping_unchecked(c: *mut xcb_connection_t,
                                              first_keycode: xcb_keycode_t,
                                              count: uint8_t) ->
     xcb_get_keyboard_mapping_cookie_t;
    pub fn xcb_get_keyboard_mapping_keysyms(R:
                                                *const xcb_get_keyboard_mapping_reply_t)
     -> *mut xcb_keysym_t;
    pub fn xcb_get_keyboard_mapping_keysyms_length(R:
                                                       *const xcb_get_keyboard_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_keyboard_mapping_keysyms_end(R:
                                                    *const xcb_get_keyboard_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_keyboard_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_keyboard_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_keyboard_mapping_reply_t;
    pub fn xcb_change_keyboard_control_sizeof(_buffer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn xcb_change_keyboard_control_checked(c: *mut xcb_connection_t,
                                               value_mask: uint32_t,
                                               value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_keyboard_control(c: *mut xcb_connection_t,
                                       value_mask: uint32_t,
                                       value_list: *const uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_keyboard_control(c: *mut xcb_connection_t) ->
     xcb_get_keyboard_control_cookie_t;
    pub fn xcb_get_keyboard_control_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_keyboard_control_cookie_t;
    pub fn xcb_get_keyboard_control_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_keyboard_control_cookie_t,
                                          e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_keyboard_control_reply_t;
    pub fn xcb_bell_checked(c: *mut xcb_connection_t, percent: int8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_bell(c: *mut xcb_connection_t, percent: int8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_pointer_control_checked(c: *mut xcb_connection_t,
                                              acceleration_numerator: int16_t,
                                              acceleration_denominator:
                                                  int16_t, threshold: int16_t,
                                              do_acceleration: uint8_t,
                                              do_threshold: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_pointer_control(c: *mut xcb_connection_t,
                                      acceleration_numerator: int16_t,
                                      acceleration_denominator: int16_t,
                                      threshold: int16_t,
                                      do_acceleration: uint8_t,
                                      do_threshold: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_pointer_control(c: *mut xcb_connection_t) ->
     xcb_get_pointer_control_cookie_t;
    pub fn xcb_get_pointer_control_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_pointer_control_cookie_t;
    pub fn xcb_get_pointer_control_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_pointer_control_cookie_t,
                                         e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_pointer_control_reply_t;
    pub fn xcb_set_screen_saver_checked(c: *mut xcb_connection_t,
                                        timeout: int16_t, interval: int16_t,
                                        prefer_blanking: uint8_t,
                                        allow_exposures: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_screen_saver(c: *mut xcb_connection_t, timeout: int16_t,
                                interval: int16_t, prefer_blanking: uint8_t,
                                allow_exposures: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_get_screen_saver(c: *mut xcb_connection_t) ->
     xcb_get_screen_saver_cookie_t;
    pub fn xcb_get_screen_saver_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_screen_saver_cookie_t;
    pub fn xcb_get_screen_saver_reply(c: *mut xcb_connection_t,
                                      cookie: xcb_get_screen_saver_cookie_t,
                                      e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_screen_saver_reply_t;
    pub fn xcb_change_hosts_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_change_hosts_checked(c: *mut xcb_connection_t, mode: uint8_t,
                                    family: uint8_t, address_len: uint16_t,
                                    address: *const uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_change_hosts(c: *mut xcb_connection_t, mode: uint8_t,
                            family: uint8_t, address_len: uint16_t,
                            address: *const uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_host_sizeof(_buffer: *const ::libc::c_void) -> ::libc::c_int;
    pub fn xcb_host_address(R: *const xcb_host_t) -> *mut uint8_t;
    pub fn xcb_host_address_length(R: *const xcb_host_t) -> ::libc::c_int;
    pub fn xcb_host_address_end(R: *const xcb_host_t) ->
     xcb_generic_iterator_t;
    pub fn xcb_host_next(i: *mut xcb_host_iterator_t);
    pub fn xcb_host_end(i: xcb_host_iterator_t) -> xcb_generic_iterator_t;
    pub fn xcb_list_hosts_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_list_hosts(c: *mut xcb_connection_t) ->
     xcb_list_hosts_cookie_t;
    pub fn xcb_list_hosts_unchecked(c: *mut xcb_connection_t) ->
     xcb_list_hosts_cookie_t;
    pub fn xcb_list_hosts_hosts_length(R: *const xcb_list_hosts_reply_t) ->
     ::libc::c_int;
    pub fn xcb_list_hosts_hosts_iterator(R: *const xcb_list_hosts_reply_t) ->
     xcb_host_iterator_t;
    pub fn xcb_list_hosts_reply(c: *mut xcb_connection_t,
                                cookie: xcb_list_hosts_cookie_t,
                                e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_list_hosts_reply_t;
    pub fn xcb_set_access_control_checked(c: *mut xcb_connection_t,
                                          mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_set_access_control(c: *mut xcb_connection_t, mode: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_close_down_mode_checked(c: *mut xcb_connection_t,
                                           mode: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_close_down_mode(c: *mut xcb_connection_t, mode: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_kill_client_checked(c: *mut xcb_connection_t,
                                   resource: uint32_t) -> xcb_void_cookie_t;
    pub fn xcb_kill_client(c: *mut xcb_connection_t, resource: uint32_t) ->
     xcb_void_cookie_t;
    pub fn xcb_rotate_properties_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_rotate_properties_checked(c: *mut xcb_connection_t,
                                         window: xcb_window_t,
                                         atoms_len: uint16_t, delta: int16_t,
                                         atoms: *const xcb_atom_t) ->
     xcb_void_cookie_t;
    pub fn xcb_rotate_properties(c: *mut xcb_connection_t,
                                 window: xcb_window_t, atoms_len: uint16_t,
                                 delta: int16_t, atoms: *const xcb_atom_t) ->
     xcb_void_cookie_t;
    pub fn xcb_force_screen_saver_checked(c: *mut xcb_connection_t,
                                          mode: uint8_t) -> xcb_void_cookie_t;
    pub fn xcb_force_screen_saver(c: *mut xcb_connection_t, mode: uint8_t) ->
     xcb_void_cookie_t;
    pub fn xcb_set_pointer_mapping_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_set_pointer_mapping(c: *mut xcb_connection_t, map_len: uint8_t,
                                   map: *const uint8_t) ->
     xcb_set_pointer_mapping_cookie_t;
    pub fn xcb_set_pointer_mapping_unchecked(c: *mut xcb_connection_t,
                                             map_len: uint8_t,
                                             map: *const uint8_t) ->
     xcb_set_pointer_mapping_cookie_t;
    pub fn xcb_set_pointer_mapping_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_set_pointer_mapping_cookie_t,
                                         e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_set_pointer_mapping_reply_t;
    pub fn xcb_get_pointer_mapping_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_pointer_mapping(c: *mut xcb_connection_t) ->
     xcb_get_pointer_mapping_cookie_t;
    pub fn xcb_get_pointer_mapping_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_pointer_mapping_cookie_t;
    pub fn xcb_get_pointer_mapping_map(R:
                                           *const xcb_get_pointer_mapping_reply_t)
     -> *mut uint8_t;
    pub fn xcb_get_pointer_mapping_map_length(R:
                                                  *const xcb_get_pointer_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_pointer_mapping_map_end(R:
                                               *const xcb_get_pointer_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_pointer_mapping_reply(c: *mut xcb_connection_t,
                                         cookie:
                                             xcb_get_pointer_mapping_cookie_t,
                                         e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_pointer_mapping_reply_t;
    pub fn xcb_set_modifier_mapping_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_set_modifier_mapping(c: *mut xcb_connection_t,
                                    keycodes_per_modifier: uint8_t,
                                    keycodes: *const xcb_keycode_t) ->
     xcb_set_modifier_mapping_cookie_t;
    pub fn xcb_set_modifier_mapping_unchecked(c: *mut xcb_connection_t,
                                              keycodes_per_modifier: uint8_t,
                                              keycodes: *const xcb_keycode_t)
     -> xcb_set_modifier_mapping_cookie_t;
    pub fn xcb_set_modifier_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_set_modifier_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_set_modifier_mapping_reply_t;
    pub fn xcb_get_modifier_mapping_sizeof(_buffer: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn xcb_get_modifier_mapping(c: *mut xcb_connection_t) ->
     xcb_get_modifier_mapping_cookie_t;
    pub fn xcb_get_modifier_mapping_unchecked(c: *mut xcb_connection_t) ->
     xcb_get_modifier_mapping_cookie_t;
    pub fn xcb_get_modifier_mapping_keycodes(R:
                                                 *const xcb_get_modifier_mapping_reply_t)
     -> *mut xcb_keycode_t;
    pub fn xcb_get_modifier_mapping_keycodes_length(R:
                                                        *const xcb_get_modifier_mapping_reply_t)
     -> ::libc::c_int;
    pub fn xcb_get_modifier_mapping_keycodes_end(R:
                                                     *const xcb_get_modifier_mapping_reply_t)
     -> xcb_generic_iterator_t;
    pub fn xcb_get_modifier_mapping_reply(c: *mut xcb_connection_t,
                                          cookie:
                                              xcb_get_modifier_mapping_cookie_t,
                                          e: *mut *mut xcb_generic_error_t) ->
     *mut xcb_get_modifier_mapping_reply_t;
    pub fn xcb_no_operation_checked(c: *mut xcb_connection_t) ->
     xcb_void_cookie_t;
    pub fn xcb_no_operation(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
    pub fn xcb_flush(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_get_maximum_request_length(c: *mut xcb_connection_t) ->
     uint32_t;
    pub fn xcb_prefetch_maximum_request_length(c: *mut xcb_connection_t);
    pub fn xcb_wait_for_event(c: *mut xcb_connection_t) ->
     *mut xcb_generic_event_t;
    pub fn xcb_poll_for_event(c: *mut xcb_connection_t) ->
     *mut xcb_generic_event_t;
    pub fn xcb_poll_for_queued_event(c: *mut xcb_connection_t) ->
     *mut xcb_generic_event_t;
    pub fn xcb_poll_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t) ->
     *mut xcb_generic_event_t;
    pub fn xcb_wait_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t) ->
     *mut xcb_generic_event_t;
    pub fn xcb_register_for_special_xge(c: *mut xcb_connection_t,
                                        ext: *mut xcb_extension_t,
                                        eid: uint32_t, stamp: *mut uint32_t)
     -> *mut xcb_special_event_t;
    pub fn xcb_unregister_for_special_event(c: *mut xcb_connection_t,
                                            se: *mut xcb_special_event_t);
    pub fn xcb_request_check(c: *mut xcb_connection_t,
                             cookie: xcb_void_cookie_t) ->
     *mut xcb_generic_error_t;
    pub fn xcb_discard_reply(c: *mut xcb_connection_t,
                             sequence: ::libc::c_uint);
    pub fn xcb_get_extension_data(c: *mut xcb_connection_t,
                                  ext: *mut xcb_extension_t) ->
     *const Struct_xcb_query_extension_reply_t;
    pub fn xcb_prefetch_extension_data(c: *mut xcb_connection_t,
                                       ext: *mut xcb_extension_t);
    pub fn xcb_get_setup(c: *mut xcb_connection_t) ->
     *const Struct_xcb_setup_t;
    pub fn xcb_get_file_descriptor(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_connection_has_error(c: *mut xcb_connection_t) ->
     ::libc::c_int;
    pub fn xcb_connect_to_fd(fd: ::libc::c_int,
                             auth_info: *mut xcb_auth_info_t) ->
     *mut xcb_connection_t;
    pub fn xcb_disconnect(c: *mut xcb_connection_t);
    pub fn xcb_parse_display(name: *const ::libc::c_char,
                             host: *mut *mut ::libc::c_char,
                             display: *mut ::libc::c_int,
                             screen: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn xcb_connect(displayname: *const ::libc::c_char,
                       screenp: *mut ::libc::c_int) -> *mut xcb_connection_t;
    pub fn xcb_connect_to_display_with_auth_info(display:
                                                     *const ::libc::c_char,
                                                 auth: *mut xcb_auth_info_t,
                                                 screen: *mut ::libc::c_int)
     -> *mut xcb_connection_t;
    pub fn xcb_generate_id(c: *mut xcb_connection_t) -> uint32_t;
}
